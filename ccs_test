var app = {};
app.thisVersionInt = 120;


function DOMtoString(document_root) {
    var html = '',
        node = document_root.firstChild;
    while (node) {
        switch (node.nodeType) {
        case Node.ELEMENT_NODE:
            html += node.outerHTML;
            break;
        case Node.TEXT_NODE:
            html += node.nodeValue;
            break;
        case Node.CDATA_SECTION_NODE:
            html += '<![CDATA[' + node.nodeValue + ']]>';
            break;
        case Node.COMMENT_NODE:
            html += '<!--' + node.nodeValue + '-->';
            break;
        case Node.DOCUMENT_TYPE_NODE:
            // (X)HTML documents are identified by public identifiers
            html += "<!DOCTYPE " + node.name + (node.publicId ? ' PUBLIC "' + node.publicId + '"' : '') + (!node.publicId && node.systemId ? ' SYSTEM' : '') + (node.systemId ? ' "' + node.systemId + '"' : '') + '>\n';
            break;
        }
        node = node.nextSibling;
    }
    return html;
}

var htmlsrc = DOMtoString(document); 



String.prototype.contains = function(str)
{
	if (this.indexOf(str) != (-1)) {return true} else {return false}
}



String.prototype.between = function(prefix, suffix) {
	var s = this;		
	s = !!prefix ? s.slice(s.indexOf(prefix)+prefix.length) : s.slice(0);	
	s = !!suffix ? s.slice(0, s.indexOf(suffix)) : s;	
	return s;
}



try { app.userViewConfig = JSON.parse( htmlsrc.between('"userViewConfig":' ,"};") ) } catch {}


app.fullUrl = window.location.toString();
app.baseUrl = window.location.toString().between("", "/users/");
app.sessionId = htmlsrc.between('"session":{"ssid":"', '"},"');
app.userId = !window.location.toString().contains("cameras") ? window.location.toString().between("/users/", "").split('/').join('') : window.location.toString().between("/users/", "/")



var viewSettings = {};


app.blockMessages = false;

chrome.runtime.onMessage.addListener(function (request, sender) {

	if (request.message == 'go' && !app.blockMessages) {		
	
	app.blockMessages = true;

	app.initiate();
		
	}
	
});



async function checkVersion () {
	const lastVer = await fetch("https://raw.githubusercontent.com/alexeart/ivpe_aux/master/availver")
	if (lastVer.ok) {
		let ver = await lastVer.text();
		return ver;
	} else {
		return null;
	}	
}



function loadServerJson(deleted, callback)
{	
	var time0 = performance.now();	
	
	var http = new XMLHttpRequest();	
	var url = 'https://openapi-alpha-eu01.ivideon.com/servers?op=FIND&access_token=' + app.sessionId;	
		
	var params = '{"user":"' + app.userId + '","limit":999,"skip":0,"include_all":true,"projection":{"id":1,"owner":1,"owner_name":1,"first_online":1,"online":1,"deleted":1,"uin":1,"name":1, "device_type":1, "mac_address":1,"serial_number":1,"software_version":1,"available_updates":1, "network_type":1, "wifi":1, "imitate_offline":1, "ip":1, "cameras":{"id":1,"name":1,"first_online":1,"online":1,"mode":1,"services":1,"mac_address":1,"serial_number":1, "cloud_archive_mode":1, "plan":1, "sources":1, "vendor":1,"device_model":1,"_misc":1,"_others":1},"_misc":1,"_others":1},"deleted":' + deleted + '}';
	
	http.open('POST', url, true);	
	http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');	
	
	http.onreadystatechange = function() {
		if(http.readyState == 4 && http.status == 200) {			

		  	app.serverArr = JSON.parse(http.response).result.items;		

			//console.log("http.response", http.response);

				var time1 = performance.now();	
				
				app.serverJsonLoadTime = time1 - time0;
				
				console.log("app.serverJsonLoadTime", app.serverJsonLoadTime)
  
			if (typeof callback == 'function') callback()
				
		}
		
		else if (http.readyState == 4 && http.status == 401) 
		{
			document.getElementById("loading-big").style.display = "none";
			alert ("Нет доступа к данным. Перезагрузите страницу и заново зайдите в кабинет партнера.")
		}	
		
	}
	
	http.send(params)	
}



function unixTimeToNormal(utcSeconds) {
	let d = new Date(0); 
	d.setUTCSeconds(utcSeconds);
	let dateLine = String(d);
	let breakPlace = dateLine.indexOf("GMT");
	let finalDate = dateLine.substring(4,breakPlace);
	return finalDate;
}
	


function toBool(str)
{	
	if(!!str) 
	{
		return ( (str.toLowerCase() == 'true' || str == '1') ? true : (str.toLowerCase() == 'false' || str == '0') ? false : null) 
	}
	else return null;
}



loadTemplate = async function(template)
{					
	const url = chrome.extension.getURL(template)
	
	const response = await fetch(url)
	
	return await response.text();
}
	
	


function getAvatarSession(callback)
{	
callback()
}






app.supportLogin = function(password)
{
	let url = "="+password;
		
	let http = new XMLHttpRequest();
			
	http.open('POST', url, true);
	
	http.setRequestHeader('Content-type', 'application/json');

	http.onreadystatechange = function() {
	if(http.readyState == 4 && http.status == 200) {
	
		app.supportSessionId = JSON.parse(http.responseText).response.session_id;			
		console.log("app.supportSessionId", app.supportSessionId);
		
		}									
	}
	
	http.send()
}



function customizeButton(image, element, func, disabledWhileMonitoring, extraStyle, callback)
{			
	//var button = (typeof element == "string") ? document.getElementById(element) : element;
	//console.log("customizeButton element", element)
	var button = (typeof element == "string") ? document.getElementById(element) : element;
	
	
	
	var textColor = "";
	
	if (!!image) {
		
		if (!image.contains("color:") ) { button.src = app.images[image] }
			
		else { textColor = (image + "; font-weight: bold;") };		
	}
	
	button.style = ("cursor: pointer; opacity: 0.6;" + textColor + (!!extraStyle ? extraStyle : "") );
	

	
	if (!!disabledWhileMonitoring)
	{
		button.onmouseover = function(){ if(!app.monitoring) button.style.opacity = 0.8 };	
		button.onmouseout = function(){ if(!app.monitoring) button.style.opacity = 0.6 };
		
		button.classList.add("device-specific")
		
		if (!!func) button.addEventListener("click", () => {
		
			if(!app.monitoring) { func() }			
			else
			{				
				var opacVal = 0.8;
				var intCount = 0;
				var goDown = true;
				
				var picInterval = setInterval(function(){
				
					if(goDown)
					{
						if(opacVal > 0.2) 
						{
							opacVal -= 0.05;
							button.style.opacity = opacVal;
						}
						else {goDown = false}
					}										
					else  
					{
						if(opacVal < 0.8) 
						{
							opacVal += 0.05;
							button.style.opacity = opacVal;
						}
						else {goDown = true};	
					}
					
					intCount++;						
					if (intCount > 100) 
					{	
						clearInterval(picInterval);
						button.style.opacity = 0.6;
					}			
					//					
		
				},5)				
				
			}
		
		});
				
				
	}
	else
	{
		button.onmouseover = function(){button.style.opacity = 0.8 };	
		button.onmouseout = function(){button.style.opacity = 0.6 };	
		
		//if (!!func) button.addEventListener("click", func);
		
		if (!!func) button.onclick = func;
	}
	
	if (typeof callback == 'function') callback();
    
}



	

	var device = function(obj)
	{

		Object.assign(this, obj)
		
		var d = this;
		
		d.dashedId = d.id.split(':').join('-');
		d.sid = d.id.split(':')[0];
			
		
		d.initPanels = function(updateConfigFunction, callback)
		{
			
			d.bottomTable = d.el("bottom-table");			
			d.bottomTable.style.display = "none";			
			d.bottomTableOpened = false;
			
			d.settingsTable = d.el("settings-table");			
			d.settingsTable.style.display = "none";			
			d.settingsTableOpened = false;
			
		
			d.customizeButton("expand_down", "expand-down-button", async function(){	
			
				d.bottomTableOpened = !d.bottomTableOpened;	
				
				if (d.bottomTableOpened)
				{								
					d.bottomTable.style.display = "block";
					
					d.el("expand-down-button").src = app.images["expanded_down"];
					
					if(d.objType == "embedded_server")
					{
						d.drawSecuredInfo();								
					}
		
				}		
				
				else 
				{
					d.bottomTable.style.display = "none";
					d.el("expand-down-button").src = app.images["expand_down"];
				}
			}, true);
				
				
			d.customizeButton("settings_gear", "settings-button", function(){
													
				d.settingsTableOpened = !d.settingsTableOpened;
							
				if (d.settingsTableOpened){
					
					updateConfigFunction( ()=>{
						
						d.settingsTable.style.display = "block";
						
						if (!!callback) callback();
						
						
						d.el("settings-button").src = app.images["close"];
						
					})
				}
				
				else {
					d.settingsTable.style.display = "none";
					
					while(d.el("settings-body").firstChild) {
						d.el("settings-body").removeChild( d.el("settings-body").lastChild )
					}
					d.el("settings-button").src = app.images["settings_gear"];
				}
			}, true);
			
			

		
		}
		
		
		d.displayCopyButton = function()
		{			
			d.el("copy-button-appear-area").onmouseover = function(){
				d.el("copy-button-embed").style.display = "block"
				
			}
			
			d.el("copy-button-appear-area").onmouseout = function(){
				d.el("copy-button-embed").style.display = "none"
			}
		}
		
		
		d.customizeButton = function(image, element, func, disabledWhileMonitoring, extraStyle, callback)
		{
			let d = this;
			
			//console.log("d.customizeButton element", element)
			
			customizeButton(image, d.el(element), func, disabledWhileMonitoring, extraStyle, callback)
		}
		
		
		
		d.el = function(element)
		{
	
		}	
		
		
		d.customizeInput = function(elementId, currentValue, options)	
		{	
			
			let element = d.el(elementId);
			
			if (typeof currentValue === 'undefined')
			{			
				element.disabled = true; 						
				return false 
			}
			
			
			if (element.type == "select-one" && !!options)
			{					
				if (typeof options == 'string') {options = options.split(",")}
				
				var selectOptions = [];
				
				for (let i=0; i<options.length; i++)
				{
					selectOptions[i] = document.createElement("OPTION");	
					
					if (typeof options[i] == "object") {selectOptions[i].value = options[i].value; selectOptions[i].text = options[i].text}
						
					else {selectOptions[i].text = options[i]}
					
					element.add(selectOptions[i]);	
					
					//console.log("currentValue", currentValue)
					//console.log("selectOptions[i].value", selectOptions[i].value)
					
					if(String(selectOptions[i].value) == String(currentValue) ) 
					{				
						selectOptions[i].selected = true;
					}									
				}			
			} 
			
			else if (element.type == "checkbox") {element.checked = toBool(currentValue)}
			
			else if (element.type == "range") 
			{			
				let step = options[2]
				
				element.min = options[0]
				element.max = (!!step) ? (options[1] / step) : options[1];
				
				element.value = (!!step) ? (parseInt(currentValue) / step) : parseInt(currentValue);
				
				document.getElementById(elementId+ "-" + d.dashedId + "-" + "value").innerHTML = (!!step) ? (element.value * step) : element.value;
		
				element.oninput = function() {
					
					document.getElementById(elementId+ "-" + d.dashedId + "-" + "value").innerHTML = (!!step) ? (this.value * step) : this.value;
					
				}		
			}
			
			else {element.value = currentValue}		
			
			return element;
		
		}
		
		
		
		d.renderStatus = function(status, message, stayTime)
		{				
			//console.log("renderStatus:", "status", status, "message", message, "stayTime", stayTime)			
			let statusImage = document.createElement('IMG');			
			statusImage.src = app.images[status];				
			
			//var statusPlace = document.getElementById('settings-status-text-'+id);
			let statusPlace = d.el('settings-status-text');
			statusPlace.innerHTML = "";
			
			if (!!message) {
				let messageText = message.length < 150 ? message : message.slice(0, 150) + '...';
				statusPlace.innerText = messageText;								
			}
				
			//var iconPlace = document.getElementById('settings-status-icon-'+id);
			let iconPlace = d.el('settings-status-icon');
			iconPlace.innerHTML = "";
			iconPlace.appendChild(statusImage);			
			
			if (status != "loading") setTimeout(function(){
				
				iconPlace.innerHTML = "";
				statusPlace.innerHTML = "";	
				
			}, stayTime);
		
		}
		
		
		d.closeSettings = function()
		{			
			d.settingsTableOpened = false;						
			d.settingsTable.style.display = "none";
			
			d.clearClildren("settings-body")
	
			d.el("settings-button").src = app.images["settings_gear"];			
		}
		
		
		d.clearClildren = function (elem) {
			while(d.el(elem).firstChild) {
				d.el(elem).removeChild( d.el(elem).lastChild )
			}
		}
		
		
		d.copyInfo = function(text)
		{
			console.log("text in copyInfo", text)
			
			var userInfo = app.userId, userEmail;
			
			try {				
				//userEmail = htmlsrc.between('<span class="divider">/</span></li><li class="active">', '&nbsp;&nbsp;<span id="back-to-original"')	
				userEmail = htmlsrc.between('<title>Клиент: ', ' | Ivideon')	
			//<meta name="title" content="Клиент: ivideon62@gmail.com | Ivideon">
			} catch {}
			
			if (typeof userEmail !== 'undefined') {	userInfo = userEmail + " / " + app.userId }
			
			var div = d.el("copy-field");
			div.style.display = "block";
			div.innerHTML = "Аккаунт: " + userInfo + "<br><br>" + text;
			
			
			var range = document.createRange();
            range.selectNode(div);
            window.getSelection().removeAllRanges(); 
            window.getSelection().addRange(range); 
            document.execCommand("copy");
            window.getSelection().removeAllRanges();
			
			div.innerHTML = '<font color="red"><b>Скопировано!</b></font>'
			
			setTimeout(()=>{
				
				div.style.display = "none";
				
			},750)
		}
		
	}


	

app.el = function(element)
{
	return document.getElementById(element)
}


app.saveConfig = function()
{
	chrome.storage.sync.set({"appConfig" : app.settings}, function() {

		chrome.storage.sync.get(["appConfig"], function(result){
	
			if (chrome.runtime.lastError) 
			{
				console.log(chrome.runtime.lastError.message)
			}
		
			else 
			{
				console.log("just saved: ", result)
				
			}
		});	
	 
	});
}


app.loadConfig = function()
{
	return new Promise(function(resolve)
	{		
		chrome.storage.sync.get(["appConfig"], function(result)				
		{			
			if (!chrome.runtime.lastError && JSON.stringify(result).length > 32)
			{
				resolve(result)
				console.log("resolve(result)")
			}
			else
			{
				let settings = { 
				
					appConfig: {
						
						searchBy : { name : true, sn : true, mac: true, 
						
						model: true, serverid: true, uin : true, platform : true},
						
						sortByIp : true,
						
						bigEmbedCards : true,
						
						bigCamCards : true,
						
						showTimezone : true,
						
						supportPassword : ""
					}
				}	
				
				resolve(settings)
				console.log("resolve(settings)")
			}
		})			

	})
		
}


	

var server = function(obj)
{

	device.call(this, obj)	
	var s = this;
		
		
	//if (s.uin == '100002000931') { console.log("server fault: ", JSON.stringify(s, null, 4)) }	
	
		
	s.redraw = function()
	{
		this.el("body").innerHTML = "";		
		this.draw();
		setPics();		
	}
		
		
	s.create = function()
	{
		this.body = document.createElement("DIV");

		this.body.id = "body-" + this.id;
		app.serverListContainer.appendChild(this.body);
		this.draw()
	}
	

		s.draw = async function()
		{					
			var serverTemplate;	
			s.partialEntry = false;
			
			
			if (s.device_type == "camera")
			{
				if (s.cameras.length != 0)
				{								
					serverTemplate = app.settings.bigEmbedCards ? app.templates["big_embed"] : app.templates["medium_embed"];					
				}
				else 
				{
					serverTemplate = app.templates["medium_multi"];
					s.partialEntry = true;
				}	
			
			}	
			else { serverTemplate = app.templates["medium_multi"]}
			
					
			s.body.innerHTML = assignIDtoElements(serverTemplate, s.id);
			
			
			if(!!s.displayColor) s.el("server-color-flag").style.backgroundColor = s.displayColor;
			
			
			if(s.foundBy != undefined)
			{
				s.el("found-by").style = "display:inline-block;height:15px;background-color:#fdff70;";
				let foundByText = "Найдено по: ";			
				s.foundBy.forEach(function(item) { foundByText += (item + ', ') })							
				foundByText = foundByText.slice(0, foundByText.length - 2)			
				s.el("found-by").innerHTML = foundByText;		
			}	
				
			s.el("server-name").innerHTML = s.name;	
			
			

			
			if (s.owner != app.userId) 
			{
				let ownerDiv = document.createElement("DIV")
				ownerDiv.innerHTML = '<font color="grey"><small>владелец: </small></font><a href="' + app.baseUrl + '/users/' + s.owner + '/cameras" target="_blank">' + s.owner_name + '</a>'
				s.el("server-name").parentNode.appendChild(ownerDiv)			
			}	
			
			if (!!s._misc.need_activation) s.el("server-name").innerHTML += '&nbsp;<font color=red><b>НЕТ КЛЮЧА!</b></font>';
			
			
			s.el("server-id").innerHTML = "id: " + s.id;				
			s.el("uin").innerHTML = s.uin;					
			s.el("server-version").innerHTML = s.software_version;
			
			
			if (!!s.available_updates)
			{
				s.el("server-version").innerHTML += ('<br><img class="avail-update-pic">&nbsp;<small>' + s.available_updates + '<small>');						
			}	
			
			
			s.el("dc").innerHTML = (s._misc.dc);
			
			
			try
			{
				if (!!s._misc.networks.eth0) 
				{
					let eth0ip = s._misc.networks.eth0.split("/")[0];
					s.el("ip_addresses").innerHTML += (s.network_type == "eth") ? eth0ip : "<font color=grey><small>" + eth0ip + "</small></font>";
					s.el("ip_addresses").innerHTML += "<br>"
				}	
				
				if (!!s._misc.networks.eth2) 
				{
					let eth2ip = s._misc.networks.eth2.split("/")[0];
					s.el("ip_addresses").innerHTML += (s.network_type == "wifi") ? eth2ip : "<font color=grey><small>" + eth2ip + "</small></font>";
				}		
				
				if (!!s._misc.networks.wlan0) 
				{
					let wlan0ip = s._misc.networks.wlan0.split("/")[0];
					//s.el("ip_addresses").innerHTML += wlan0ip;
					s.el("ip_addresses").innerHTML += (s.network_type == "wifi") ? wlan0ip : "<font color=grey><small>" + wlan0ip + "</small></font>";
				}	
			}
			catch {}
			
			
			s.el("last-online").innerHTML = unixTimeToNormal(s.last_online);
			s.el("last-offline").innerHTML = unixTimeToNormal(s.last_offline);
			s.el("first-online").innerHTML = unixTimeToNormal(s.first_online);		
			
			
			s.el("firmware").innerHTML = '<font color="grey">Прошивка:&nbsp;</font>' + s._misc.firmware_version;
			
			
			
			if (s.device_type === 'camera')
			{	
				s.objType = "embedded_server";	
				
				if (s.cameras.length != 0)
				{
					s.cameras[0] = new camera(s.cameras[0]);
	
					try {s.cameras[0].parentServerBuild = s._misc.build_type} catch {}		
							
					s.initPanels(s.cameras[0].getCameraConfig);
					
					s.cameras[0].drawIvideonSettingsList();
					
					s.cameras[0].drawCommonCameraInfo();
					
					s.el("firmware").innerHTML += '&nbsp;&nbsp;<font color="grey">Trade series:&nbsp;</font>' + s.cameras[0]._misc.trade_series || "нет";
				}
				else
				{
					s.initPanels();
				}
	
	
				if(!!s.mac_address) s.el("mac").innerHTML = macBeautifier(s.mac_address);
	
	
				if (s.deleted) 
				{
					s.el("server-status").src = app.images["deleted"];
					s.el("settings-button").remove();				
				}
				else		
				{
					if (s.online) 
					{ 
						s.el("server-status").src = app.images["server_online"] 
					}			
					else 
					{ 
						if (!s.partialEntry) {
							s.el("server-status").src = (s.cameras[0].mode == "off") ? app.images["server_off"] : app.images["server_offline"]; 
						}
					}	
					
					s.customizeButton("color:black; display:inline-block;", "server-name", function(){
						
						window.open(app.baseUrl + "/users/avatar_session/?user_id=" + app.userId + "&return_url=%2Fwatch%2F" + s.id + "%2F0")
						
					})	
					

					/*
					s.el("copy-button-appear-area").onmouseover = function(){
						s.el("copy-button-embed").style.display = "block"
						
					}
					
					s.el("copy-button-appear-area").onmouseout = function(){
						s.el("copy-button-embed").style.display = "none"
					}
					*/
				}
					
				if (!s.partialEntry) {
					s.el("model").innerHTML = ( ( !!s.cameras[0].device_model ? s.cameras[0].device_model : "Камера") + " <small>(" + s._misc.build_type + ")</small>");	
				}
				else {
					s.el("model").innerHTML = s._misc.build_type;
				}				
				
				s.el("network").innerHTML = (s.network_type == "wifi") ? '<img class="wifi-pic">&nbsp;' + s.wifi.ssid : "Ethernet";				
				
	
				
				if (s["_misc"].build_type.contains("dahua") )
				{
					s.el("platform-specific-settings-list").innerHTML = assignIDtoElements(app.templates["dahua_settings_list"], s.id);
										
					s.customizeButton("color:#001087", "network-settings-button-embed", s.drawNetworkSettings);									
					s.customizeButton("color:#001087", "dahua-encode-settings-button-embed", s.drawDahuaEncodeSettings);					
					s.customizeButton("color:#001087", "dahua-video-settings-button-embed", s.drawDahuaVideoSettings);						
					s.customizeButton("color:#001087", "dahua-audio-settings-button-embed", s.drawDahuaAudioSettings);		
					s.customizeButton("color:#001087", "local-recording-settings-button-embed", ()=> s.drawLocalRecordingSettings(true) );	
					s.customizeButton("color:#001087", "dahua-system-settings-button-embed", s.drawDahuaSystemSettings);						
					s.customizeButton("color:#001087", "dahua-detection-settings-button-embed", s.drawDahuaDetectionSettings);
					
				}
				
				if (s["_misc"].build_type.contains("hikvision") )
				{
					s.el("platform-specific-settings-list").innerHTML = assignIDtoElements(app.templates["hik_settings_list"], s.id);
					
					s.customizeButton("color:#001087", "hik-network-settings-button", s.drawHikNetworkSettings);									
					s.customizeButton("color:#001087", "hik-system-settings-button", s.drawHikSystemSettings);	
					s.customizeButton("color:#001087", "hik-audio-settings-button", s.drawHikAudioSettings);
					s.customizeButton("color:#001087", "hik-detection-settings-button", s.drawHikDetectionSettings);
					s.customizeButton("color:#001087", "hik-image-settings-button", s.drawHikImageSettings);	
					s.customizeButton("color:#001087", "hik-card-settings-button", s.drawHikCardSettings);					
					
				}
				
				s.customizeButton("copy", "copy-button-embed", () => {
					
					let model = (typeof s.cameras[0].device_model !== 'undefined') ? '(' + s.cameras[0].device_model + ')' : '';			

					console.log("model", model);
					
					let str = 'Камера: "' + s.name + '" / ' + s.uin + ' ' + model ;
					
					console.log("str", str);
					
					s.copyInfo(str);
					
				}, false, "display:none;", () => s.displayCopyButton() )
					
			}	
			
			else if (s.device_type == "dvr" || s.device_type == "desktop" || s.is_bridge)
			{
				s.initPanels( (callback) => {callback()} );
				
				if (s.someCamerasCutOut)
				{
					let expandServer = document.createElement('IMG');	
					
					customizeButton("expand_server", expandServer, () => {
						
						let originalCamArr = app.serverArr.filter(e => e.id == s.id)[0].cameras;					
						s.cameras = [].concat(originalCamArr)
						
						s.someCamerasCutOut = false;	
						
						app.el("device-stats").style.display = "none";
						
						s.redraw()
	
					})
					
					s.el("camera-list-border").appendChild(expandServer)
				}
				
				
				//s.el("settings-button").remove();
				
	
				if(s.device_type == "desktop" || s.is_bridge)
				{				
					var unlockBtn = document.createElement("IMG");				
					customizeButton("unlock", unlockBtn, s.drawSecuredInfo);				
					s.el("multiserver-info").appendChild(unlockBtn)				
				}
				
				
				let statDiv = document.createElement('DIV');
				statDiv.style = 'display:inline-block; color:grey';
				statDiv.innerHTML = '&nbsp;камер онлайн: ' + s.cameras.filter(e => e.online).length + ', всего: ' + s.cameras.length;
				s.el("multiserver-info").appendChild(statDiv)	
				
	
				if (s.deleted) 
				{
					s.el("server-status").src = app.images["deleted"];				
				}
				else
				{
					s.el("server-status").src = (s.online) ? app.images["server_online"] : app.images["server_offline"];
					
					s.customizeButton("color:black", "server-name", function(){
					
						window.open(app.baseUrl + "/users/avatar_session/?user_id=" + app.userId + "&return_url=%2Fserver%2F" + s.id)
					
					})	
				}
	
				
	
				if(!!s.mac_address) s.el("mac").innerHTML = macBeautifier(s.mac_address);
	
				s.el("model").innerHTML += (s.device_type == 'dvr') ? (s.device_model + "<small>(" + s._misc.build_type + ")</small>") : s._misc.build_type;	
				
				
				s.customizeButton("copy", "copy-button-embed", () => {
						
					let str = s.is_bridge ? "Bridge" : s._misc.build_type.contains("dvr") ? "Регистратор" : s._misc.build_type.contains("server") ? "Сервер" : "Устройство";			
					str += ' "' + s.name + '" / ' + s.uin + ' (' + s._misc.build_type + ')';  					

					s.copyInfo(str);
			
				}, false, "display:none", s.displayCopyButton)	
				
				
				let dvrHtml = '<div style="display:inline-block;" id="network-settings-button-'+s.id+'">Сетевые настройки</div><div style="display:inline-block;" id="system-settings-button-'+s.id+'">Системные настройки</div>';
				
				if (s["_misc"].build_type.contains("dahua") ) {
					let html = '<td><b>Настройки Dahua: &nbsp;</b></td><td><div id="dahua-network-settings-button-' + s.id +'">&nbsp;Сетевые&nbsp;</div></td><td><div id="dahua-system-settings-button-' + s.id +'">&nbsp;Системные&nbsp;</div> <td> <div id="dahua-local-recording-settings-button-' + s.id +'">&nbsp;Локальная запись&nbsp;</div> </td> <td> <div id="dahua-hdd-status-button-' + s.id +'">&nbsp;Статус HDD&nbsp;</div> </td>';
					s.el("platform-specific-settings-list").innerHTML = html;			
					s.customizeButton("color:#001087", "dahua-network-settings-button", () => { s.dvrFix(s.drawNetworkSettings) } );	
					s.customizeButton("color:#001087", "dahua-system-settings-button", () => { s.dvrFix(s.drawDahuaSystemSettings) } );
					s.customizeButton("color:#001087", "dahua-local-recording-settings-button", () => { s.dvrFix( ()=> s.drawLocalRecordingSettings(false) ) } );
					s.customizeButton("color:#001087", "dahua-hdd-status-button", () => { s.dvrFix(s.drawDahuaHDDInfo) } );
				}
				
				if (s["_misc"].build_type.contains("hikvision") ) {
					let html = '<td><b>Настройки Hikvision: &nbsp;</b></td><td><div id="hik-network-settings-button-' + s.id +'">&nbsp;Сетевые&nbsp;</div></td><td><div id="hik-system-settings-button-' + s.id +'">&nbsp;Системные&nbsp;</div></td>';
					s.el("platform-specific-settings-list").innerHTML = html;				
					s.customizeButton("color:#001087", "hik-network-settings-button", s.drawHikNetworkSettings);
					s.customizeButton("color:#001087", "hik-system-settings-button", s.drawHikSystemSettings);	
				}
				
				if (s.device_type == "desktop") {
					drawIVSEditor(s)
				}
				
				s.drawCameraList();	
	
			}
			
	
			else if (!s.is_bridge && s.device_type == "unknown")
			{
				if (s.deleted) 
				{
					s.el("server-status").src = app.images["deleted"];
					s.el("settings-button").remove();				
				}
				else
				{
					s.el("server-status").src = (s.online) ? app.images["server_online"] : app.images["server_offline"];
				}
				
				s.el("model").innerHTML = '<i>платформа не задана</i>';
				
				s.initPanels();	
			}			
		}
		
	
		s.drawCameraList = function()
		{
			
			for (let i=0; i<s.cameras.length; i++)
			{					
				s.cameras[i] = new camera(s.cameras[i]);
				
				//s.cameras[i].parentServerType = s.device_type;			
				//if(s.is_bridge) s.cameras[i].parentServerType = "bridge";
				
				s.cameras[i].parentServerName = s.name;
				s.cameras[i].parentServerType = (s.is_bridge) ? "bridge" : s.device_type;
				s.cameras[i].parentServerBuild = s._misc.build_type;
				s.cameras[i].parentServerDeleted = s.deleted;
				
				var camDiv = document.createElement("DIV");
				camDiv.id = ("camera-" + s.cameras[i].id.split(":").join("-"))
				s.el("camera-list").appendChild(camDiv)
				
				s.cameras[i].create();				
			}
		}
		
		
		s.dvrFix = async function(callback) {
			let reqUrl = 'xxxxxxxxxserver=' + s.id + '&camera=0&sessionId=' + app.avatarSessionId + '&command=ln%20-s%20%24VS_BIN%20%24HTTP_TOOL';
			let response = await fetch(reqUrl, {method: "GET"});
			let responseJson = await response.json();
			callback(); 			
		}
		
		
		s.el = function(element, cameraId)
		{
			return !!cameraId ? document.getElementById(element + "-" + this.id + "-" + cameraId) : document.getElementById(element + "-" + this.id)
		}
		
		
		s.setId = function(element)
		{
			return element + "-" +this.id;
		}
		
		
		s.loadPage = function(page)
		{	
			
			const url = chrome.extension.getURL(page)
	
			fetch(url)
			.then( (resp) => resp.text())
			.then( (resp) => {
					
			s.el("settings-body-embed").innerHTML = assignIDtoElements(resp, s.id);
			
			return false;
			//s.el("settings-body-embed").innerHTML += assignIDtoElements(statuses, s.id);
				
			})
		}

		
		s.drawSecuredInfo = async function()
		{
			
			let response = await fetch("xxxxxxxxx/servers/" + s.id + "/protected_data?op=GET&access_token=" + app.sessionId, {method: "POST"});
			//let response = await fetch("xxxxxxxxx/servers/" + obj.id + "/protected_data?op=GET&access_token=100-E0573a305-a1bb-4de9-b74b-146f9caf4e23", {method: "POST"});
			let secInfo = await response.json(); 	
	
			console.log("secInfo", secInfo)
			

			if(s.device_type == "camera") {
				let auth = extractData(secInfo.result.cameras[0].sources).authData;		
				s.el("local-password").innerHTML = '<font color="grey">Ориг. авторизация:&nbsp;</font>' + auth.split(':').join(' / ');				
			}
	
			let key = secInfo.result.activation_code				
			if(!!key) s.el("local-password").innerHTML += ("&nbsp;&nbsp;Ключ: " + key);
						
			if (s.device_type == "desktop" || s.is_bridge) {
				for (let i = 0; i < s.cameras.length; i++)
				{
					if (s.cameras[i].type != "web")
					{	
						let cam = s.cameras[i];				
						cam.local_ip = extractData(secInfo.result.cameras[cam.cid].sources).ip;
						cam.auth_data = '<font color="grey">Авторизация:&nbsp;</font>' + extractData(secInfo.result.cameras[cam.cid].sources).authData;
						
						cam.el("local-password").innerHTML = cam.auth_data;
						cam.el("ip-address").innerHTML = cam.local_ip;
						
						console.log(s.cameras[i].name, s.cameras[i])
					}					
					else 
					{ 
						console.log(s.cameras[i].name, s.cameras[i]) 
					}
				}
				
			}
		}
		
		
		
		s.getCameraById = function(camId)
		{
			
			for (let i = 0; i < s.cameras.length; i++)
			{
				if (s.cameras[i].id.split(":")[1] == camId) return s.cameras[i];
			}
		}
		
		
		
		s.getSettingsViaExecute = function (sessionId, requestString, convertIntoJSON, beginString, callback)
		{
			var url = 'xxxxxxxxxserver='+s.id+'&camera=0&sessionId='+sessionId+'&command=${HTTP_TOOL} "${IVIDEON_BASE_URL}/cgi-bin/'+requestString+'"';
			
			console.log("get settings url:", url);
			
			let http = new XMLHttpRequest();
			
			console.log("requestString: ", requestString)			
			console.log("beginString: ", beginString)
					
			http.open('GET', url, true);
		
			http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
		
				http.onreadystatechange = function(){
					
					if(http.readyState == 4) 
					{	
						if(http.status == 200){
							
							if (convertIntoJSON){
								
								callback(dahuaResponseParser(http.responseText, beginString))
								
							} 
							else {callback(http.responseText)}
							
						}
						
						else {s.renderStatus('error', http.response, 4000)}
					
					} 							
					
				}
			
			http.send()
					
		}
		
		/*
		s.settingsSection = async function(template, showLoading)
		{
			var templ = await loadTemplate(template);
			
			s.el("settings-body").innerHTML = assignIDtoElements(templ, s.id);
			
			if(showLoading) s.renderStatus('loading');
			
		}
		*/
		
		s.drawNetworkSettings = async function()
		{
			
			var template = await loadTemplate("templates/template-network-settings-dash.html")				
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);
			s.el("settings-refresh-button").onclick = s.drawNetworkSettings;
			
			s.renderStatus('loading');
			
			s.el("dahua-ip-warning").style.display = "block";

		
			s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=Network', true, "table.Network.", function(network)
			{
	
				if (JSON.stringify(network).contains("PhysicalAddress")){
					
					var configData = [];
					
					var hasEth0 = !!network["eth0.PhysicalAddress"], hasEth2 = !!network["eth2.PhysicalAddress"];
					
	
					var elems = [ {place: "eth0-dhcp", value : "eth0.DhcpEnable"}, {place: "eth2-dhcp", value : "eth2.DhcpEnable"},
			
					{place: "eth0-ip-address", value : "eth0.IPAddress"}, {place: "eth2-ip-address", value : "eth2.IPAddress"},
					
					{place: "eth0-default-gateway", value : "eth0.DefaultGateway"}, {place: "eth2-default-gateway", value : "eth2.DefaultGateway"},
					
					{place: "eth0-subnet-mask", value : "eth0.SubnetMask"}, {place: "eth2-subnet-mask", value : "eth2.SubnetMask"},
					
					{place: "eth0-dns1", value : "eth0.DnsServers[0]"}, {place: "eth2-dns1", value : "eth2.DnsServers[0]"},
					
					{place: "eth0-dns2", value : "eth0.DnsServers[1]"}, {place: "eth2-dns2", value : "eth2.DnsServers[1]"},
					
					{place: "eth0-mtu", value : "eth0.MTU"}, {place: "eth2-mtu", value : "eth2.MTU"},
					
					{place: "eth0-mac", value : "eth0.PhysicalAddress"}, {place: "eth2-mac", value : "eth2.PhysicalAddress"} ]
					
					
					
					for (let i = 0; i < elems.length; i++)											
					{
						if (elems[i].place.contains("eth0"))						
						{
							if(hasEth0) s.customizeInput(elems[i].place, network[elems[i].value], elems[i].options)
								
							else s.customizeInput(elems[i].place)
						}
						else 
						
							if(hasEth2) s.customizeInput(elems[i].place, network[elems[i].value], elems[i].options)
								
							else s.customizeInput(elems[i].place)
						
						s.el(elems[i].place).style.width = "250";
					}
					
					
					function disableFields(interf, disabled) {
						s.el(interf + "-ip-address").disabled = disabled;						
						s.el(interf + "-default-gateway").disabled = disabled;						
						s.el(interf + "-subnet-mask").disabled = disabled;						
					}
					
					
					s.el("eth0-mac").disabled = true; s.el("eth2-mac").disabled = true;
					if (toBool(network["eth0.DhcpEnable"]) ) disableFields("eth0", true);					
					if (toBool(network["eth2.DhcpEnable"]) ) disableFields("eth2", true);
					

					s.el("eth0-dhcp").onclick = function(){disableFields("eth0", this.checked)}							
					s.el("eth2-dhcp").onclick = function(){disableFields("eth2", this.checked)}	
					
					if (hasEth2) { s.customizeButton("color:#001087;display:block;", "dahua-wifi-signal-toggle", getWifiData) }//display:block;
					
					function setDns(network, dnsArr) {
						if (!s.el(network + "-dns1").disabled) 
						{
							s.el(network + "-dns1").value = dnsArr[0];
							s.el(network + "-dns2").value = dnsArr[1];
						}
					}	
					
					function getWifiData() {
						let ssid = s.wifi.ssid.split(' ').join('%20');						
						s.getSettingsViaExecute(app.avatarSessionId, 'wlan.cgi?action=scanWlanDevices%26SSID='+ssid, false, false, function(wifi) {							
							
							let data = JSON.parse(wifi).response.substring(7);
							let quality = data.between("LinkQuality=", "\n");
							s.el("dahua-wifi-signal-field").style.display = 'block';
							s.el("dahua-wifi-signal-field").innerHTML = "Качество сигнала: <b>" + (!!quality ? quality : 'н/д') + "</b>";
							s.el("dahua-wifi-signal-toggle").innerText = "обновить данные Wi-Fi сигнала";
						})						
					}
				
					
					customizeButton("color:blue", "eth0-google-dns-"+s.id, () => { setDns("eth0" ,["8.8.8.8", "8.8.4.4"]) } )					
					customizeButton("color:blue", "eth0-cloudflare-dns-"+s.id, () => { setDns("eth0" ,["1.1.1.1", "1.0.0.1"]) } )
					s.customizeButton("color:blue", "eth0-yandex-dns", () => { setDns("eth0" ,["77.88.8.8", "77.88.8.1"]) } )
					
					customizeButton("color:blue", "eth2-google-dns-"+s.id, () => { setDns("eth2" ,["8.8.8.8", "8.8.4.4"]) } )						
					customizeButton("color:blue", "eth2-cloudflare-dns-"+s.id, () => { setDns("eth2" ,["1.1.1.1", "1.0.0.1"]) } )
					s.customizeButton("color:blue", "eth2-yandex-dns", () => { setDns("eth2" ,["77.88.8.8", "77.88.8.1"]) } )
					


										
					
					s.el("network-settings-save-button").onclick = function()
					{
						var configStr = "configManager.cgi?action=setConfig";
						
						for (let i=0; i<elems.length; i++)
						{
							if (!s.el(elems[i].place).disabled) {
								
								configStr += ("%26Network." + elems[i].value + "=");
								
								if (elems[i].place.contains("mtu")) configStr += s.el(elems[i].place).value
	
								else if	(elems[i].place.contains("dhcp")) configStr += String(s.el(elems[i].place).checked)					
								
								else {if(ipValidator(s.el(elems[i].place))) {configStr += ipValidator(s.el(elems[i].place))} else return false}		
							}
						
						}
					
						console.log(configStr);
					
						s.saveDahuaSettings(configStr, true);
					
					}
					
					s.renderStatus('ok', 'Loaded OK', 5000);	
				
				}
				
				else {s.renderStatus('error', 'Error', 3000)}
				
			})
		
		}
		
		
	
		
		
		s.drawDahuaDetectionSettings = async function()
		{
			var template = await loadTemplate("templates/dahua-detection-settings-dash.html")		
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);
			s.el("settings-refresh-button").onclick = s.drawDahuaDetectionSettings;
			
			s.renderStatus('loading');
				
			s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=MotionDetect[0].MotionDetectWindow[0]', true, 'table.MotionDetect[0].MotionDetectWindow[0].', function(MD)
			{
				s.customizeInput("dahua-detection-sensitivity", MD["Sensitive"], [1,100]);
				
				s.customizeInput("dahua-detection-threshold", MD["Threshold"], [1,100]);
				
				s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=Alarm[1]', true, 'table.Alarm[1].', function(PIR)
				{
					s.customizeInput("dahua-pir-alarm", PIR["Enable"], [ {value : "true", text : "Вкл."}, {value : "false", text : "Выкл."} ] );
					s.renderStatus('ok', false , 1500);
					
				})						
							
			})	
			
			
			s.el("dahua-detection-settings-save-button").onclick = function()
			{
				var configStr = "configManager.cgi?action=setConfig%26MotionDetect[0].MotionDetectWindow[0].Sensitive=" + s.el("dahua-detection-sensitivity").value;
				configStr += ("%26MotionDetect[0].MotionDetectWindow[0].Threshold=" + s.el("dahua-detection-threshold").value);
							
				//if(!s.el("dahua-pir-alarm").disabled) configStr += ("%26Alarm[1].Enable=" + s.el("dahua-pir-alarm").value);
				
				
				s.saveDahuaSettings(configStr, true);
				
			}
			
			s.el("dahua-pir-alarm").addEventListener("change", function(){
				
				s.saveDahuaSettings("configManager.cgi?action=setConfig%26Alarm[1].Enable=" + this.value, true);
				
			})
			
			
			
		}
		
		
		s.drawDahuaEncodeSettings = async function()	
		{
			//s.el("settings-body-embed").innerHTML = assignIDtoElements(app.templateDahuaEncodeSettings, s.id);
			
			var template = await loadTemplate("templates/dahua-encode-settings-dash.html")		
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);
			s.el("settings-refresh-button").onclick = s.drawDahuaEncodeSettings;
			
			s.renderStatus('loading', '');
			
			
			s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=Encode', true, 'table.Encode[0].', function(encodeConfig)
			{
				
				s.getSettingsViaExecute(app.avatarSessionId, 'encode.cgi?action=getConfigCaps', true, 'caps[0].' , function(configCaps)
				{
			
					if (JSON.stringify(encodeConfig).contains("MainFormat") && JSON.stringify(configCaps).contains("MainFormat"))
					{							
											
						console.log("encodeConfig: ", encodeConfig)						
						console.log("configCaps: ", configCaps)
						
						var configData = [];
											
						var hasAudio = !!(configCaps["MainFormat[0].Audio.CompressionTypes"]);
						
						console.log("hasAudio:", hasAudio);
						
						
						var elems = [
			
						{place: "main-stream-video-codec-field", value : "MainFormat[0].Video.Compression", options : configCaps["MainFormat[0].Video.CompressionTypes"]},
						
						{place: "main-stream-video-bitrate-type-field", value : "MainFormat[0].Video.BitRateControl", options : ["CBR", "VBR"]},
						
						{place: "main-stream-video-quality-field", value : "MainFormat[0].Video.Quality", options : ["1", "2", "3", "4", "5", "6"]},
						
						{place: "main-stream-i-interval-field", value : "MainFormat[0].Video.GOP", options : []},
						
						{place: "main-stream-audio-codec-field", value : "MainFormat[0].Audio.Compression", options : configCaps["MainFormat[0].Audio.CompressionTypes"]},
						
						{place: "main-stream-audio-frequency-field", value : "MainFormat[0].Audio.Frequency", options : ["8000", "16000"]},
						
						
						{place: "second-stream-video-codec-field", value : "ExtraFormat[0].Video.Compression", options : configCaps["ExtraFormat[0].Video.CompressionTypes"]},
						
						{place: "second-stream-video-bitrate-type-field", value : "ExtraFormat[0].Video.BitRateControl", options : ["CBR", "VBR"]},
						
						{place: "second-stream-video-quality-field", value : "ExtraFormat[0].Video.Quality", options : ["1", "2", "3", "4", "5", "6"]},
						
						{place: "second-stream-i-interval-field", value : "ExtraFormat[0].Video.GOP", options : []},
						
						{place: "second-stream-audio-codec-field", value : "ExtraFormat[0].Audio.Compression", options : configCaps["ExtraFormat[0].Audio.CompressionTypes"]},
						
						{place: "second-stream-audio-frequency-field", value : "ExtraFormat[0].Audio.Frequency", options : ["8000", "16000"]}]
		
						
						for (let i = 0; i < elems.length; i++)											
						{
							if (elems[i].value.contains("Audio"))						
							{
								if (hasAudio) s.customizeInput(elems[i].place, encodeConfig[elems[i].value], elems[i].options)
							
								else s.customizeInput(elems[i].place)
							}
							
							else s.customizeInput(elems[i].place, encodeConfig[elems[i].value], elems[i].options)
							
						}
						
						
						s.el("main-stream-video-quality-field").disabled = (encodeConfig["MainFormat[0].Video.BitRateControl"] == "CBR");
						
						s.el("second-stream-video-quality-field").disabled = (encodeConfig["ExtraFormat[0].Video.BitRateControl"] == "CBR");
						
						
						
						s.el("main-stream-video-bitrate-type-field").addEventListener("change", function()
						{
							s.el("main-stream-video-quality-field").disabled = (this.value == "CBR");
							
						})	
						
						
						s.el("second-stream-video-bitrate-type-field").addEventListener("change", function()
						{
							s.el("second-stream-video-quality-field").disabled = (this.value == "CBR");
						})	
						
						
						s.el("dahua-encode-settings-save-button").onclick = function()
						{
							
							var configStr = 'configManager.cgi?action=setConfig';
							
							for (let i = 0; i < elems.length; i++)
							{
								
								if(!s.el(elems[i].place).disabled){
																	
								configStr += ("%26Encode[0]." + elems[i].value + "=" + s.el(elems[i].place).value);
								
								}
							}
							
							console.log(configStr);
							
							s.saveDahuaSettings(configStr, true);
							
						}
						
						s.renderStatus('ok', false, 1500);
						
					}					
					else {s.renderStatus('error', 'Error', 3000)}
			
				})
			})
		
		}
		
		
		
		s.drawDahuaVideoSettings = async function() 
		{
			
			var template = await loadTemplate("templates/template-dahua-video-settings-dash.html")
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);
			document.getElementById("settings-refresh-button-"+s.id).onclick = s.drawDahuaVideoSettings;
			
			s.renderStatus('loading', '');
			
			
			s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=VideoImageControl[0]', true, 'table.VideoImageControl[0].', function(videoImageControl)
			{
				s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=VideoWidget[0]', true, 'table.VideoWidget[0].', function(videoWidget)
				{
					console.log("videoImageControl: ", videoImageControl)					
					console.log("videoWidget: ", videoWidget)
					
	
					var videoFlipDegree = "";				
	
					
					if (videoImageControl["Flip"] == "false" && videoImageControl["Rotate90"] == "0") {videoFlipDegree = "0"}
					
					else if (videoImageControl["Flip"] == "false" && videoImageControl["Rotate90"] == "1") {videoFlipDegree = "90"}
					
					else if (videoImageControl["Flip"] == "true" && videoImageControl["Rotate90"] == "0") {videoFlipDegree = "180"}
					
					else {videoFlipDegree = "270"}
					
					
					s.customizeInput("osd-enable-field", videoWidget["TimeTitle.EncodeBlend"], [{ value : "true", text : "Вкл."}, {value : "false", text : "Выкл."}]);
			
					s.customizeInput("video-flip-field", videoFlipDegree, ["0", "90", "180", "270"]);
					
					s.customizeInput("video-mirror-field", videoImageControl["Mirror"], [{ value : "true", text : "Вкл."}, {value : "false", text : "Выкл."}]);
					
					
					var videoFlipConfigStr = "";
					
					s.el("osd-enable-field").addEventListener("change", function(){
						
						s.saveDahuaSettings("configManager.cgi?action=setConfig%26VideoWidget[0].TimeTitle.EncodeBlend=" + this.value + "%26VideoWidget[0].TimeTitle.PreviewBlend=" + this.value, true);
						
					})
					
					
					s.el("video-mirror-field").addEventListener("change", function(){
					
						s.saveDahuaSettings("configManager.cgi?action=setConfig%26VideoImageControl[0].Mirror=" + this.value, true);
					
					})	
					
					
					s.el("video-flip-field").addEventListener("change", function(){
						
						var configStr = "configManager.cgi?action=setConfig%26"
						
						switch (this.value)
						{
							case "0": configStr = "VideoImageControl[0].Flip=false%26VideoImageControl[0].Rotate90=0"; break;
							
							case "90": configStr = "VideoImageControl[0].Flip=false%26VideoImageControl[0].Rotate90=1"; break;
							
							case "180": configStr = "VideoImageControl[0].Flip=true%26VideoImageControl[0].Rotate90=0"; break;
												
							case "270": configStr = "VideoImageControl[0].Flip=false%26VideoImageControl[0].Rotate90=2"; break;
							
						}
						
						s.saveDahuaSettings("configManager.cgi?action=setConfig%26" + configStr, true);
						
					})	
					
					s.renderStatus('ok', false, 1500);
					
				})
				
			})
		
		}
		
		
		s.drawLocalRecordingSettings = async function(isEmbedCamera, initCh)
		{
			var template = await loadTemplate("templates/local-recording-settings-dash.html")
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);
			s.el("settings-refresh-button").onclick = () => s.drawLocalRecordingSettings(isEmbedCamera);
			
			s.renderStatus('loading');
			
			if (!isEmbedCamera) Array.from(document.getElementsByClassName('embed-cam-local-rec-'+s.id)).map( e => { e.style.display = "none"} )
			
			
			s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=RecordMode', true, 'table.', function(recordMode) {

				console.log("recordMode", recordMode)	
				
				if (isEmbedCamera) s.getSettingsViaExecute(app.avatarSessionId, 'storageDevice.cgi?action=getDeviceAllInfo', false, false, function(localDriveInfo) {
	
					s.el("local-drive-caption").innerHTML = "Статус хранилища:";
				
					if (localDriveInfo.contains("No SD Card")) {
						
						s.el("local-drive-status-field").innerHTML = "Нет карты"; 
						
						s.el("local-drive-format-button").innerHTML = "";
					}
						
					
					else if (localDriveInfo.contains("Bad Request") || localDriveInfo.contains("Server internal error") || localDriveInfo.contains("Not Found")) {
						
						s.el("local-drive-status-field").innerHTML = "Нет карты / ошибка в ответе"; 
						s.el("local-drive-format-button").innerHTML = "";
					}					
					else {						
	
						localDriveInfo = localDriveInfo.split("list.info[0].").join("list[0]."); 
						
						var sdObj = dahuaResponseParser(localDriveInfo, "list[0].");
						
						console.log(sdObj);
	
						if(sdObj["Detail[0].IsError"] == "false") {								
							
							var totalGb = (parseInt(sdObj["Detail[0].TotalBytes"]) / Math.pow(1024,3)).toFixed(2);							
							var usedGb = (parseInt(sdObj["Detail[0].UsedBytes"]) / Math.pow(1024,3)).toFixed(2);
							var usedBytes = parseInt(sdObj["Detail[0].UsedBytes"]);
							
							s.el("local-drive-status-field").innerHTML = "<b>OK</b>, режим <b>" + sdObj["Detail[0].Type"] + "</b>, занято <b>" + usedBytes + "</b> Байт<br>(<b>" + usedGb + "</b> Гб из <b>" + totalGb + "</b> Гб)";	
						} 	else {
							s.el("local-drive-status-field").innerHTML = "Карта не отформатирована или неисправна";
						}
						
						
						s.el("local-drive-format-button").innerHTML = "Форматировать карту";
						
						customizeButton("color:#001087", "local-drive-format-button-"+s.id, () => {
							
							var c = confirm("Форматировать карту?\n После успешного форматирования настройки закроются и устройство перезагрузится.");							
							if (c) s.formatCard(1, sdObj["Pointer"]);
						});
						
					}
				})

				

				s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=Record', true, 'table.', function(schedule) {

					const chArr = Object.keys(recordMode)
					.filter( e =>  (e.indexOf('.Mode') == e.length - 5) )
					.map( e => e.between('[',']') )
					.map( e => {
						let cloudId = parseInt(e)*65536;							
						let cloudName = !!s.getCameraById(cloudId) ? (' / "' + s.getCameraById(cloudId).name + '" (' + cloudId + ')' ) : ' / нет в облаке';
						return( { 	
								value : e, 
								text : (parseInt(e)+1) + cloudName
							} ) 
					} ) 
					
					console.log("chArr", chArr)
					const channel = initCh || chArr[0].value;
					
					if (!isEmbedCamera) {
						s.customizeInput("local-recording-channel", channel, chArr)
					} else {
						s.el("local-recording-channel").disabled = true;
					}
					
					s.customizeInput("local-recording-mode", recordMode["RecordMode["+channel+"].Mode"], [{ value : "0", text : "По расписанию"}, {value : "1", text : "Постоянная"}, {value : "2", text : "Не записывать"}] )
				
					s.el("local-recording-channel").onchange = function() {
						//s.saveDahuaSettings("configManager.cgi?action=setConfig%26RecordMode["+ch+"].Mode=" + s.el("local-recording-mode").value, true)	
						drawChannelSettings(recordMode, schedule, s.el("local-recording-channel").value)
					}
					
					drawChannelSettings(recordMode, schedule, channel) 
				
				})
					

					s.renderStatus('ok', false , 1500);

					console.log("recordMode", recordMode)
					
					//customizeButton(false, "recording-schedule-default-button-"+s.id, s.saveDahuaSettings("configManager.cgi?action=restore%26names[0]=Record[0].TimeSection"));
			})
			
			
			
				function drawChannelSettings(recordMode, schedule, ch) {
					
					
					s.el("local-recording-mode").value = recordMode["RecordMode["+ch+"].Mode"]
					s.el("local-recording-mode").onchange = function(ev) {
						console.log("ev", ev)
						s.saveDahuaSettings("configManager.cgi?action=setConfig%26RecordMode["+ch+"].Mode=" + s.el("local-recording-mode").value, true, () => {
							s.drawLocalRecordingSettings(false, ch)
						})	
					}
					
					customizeButton("color:#001087", "recording-schedule-default-button-"+s.id, ()=> s.saveDahuaSettings("configManager.cgi?action=restore%26names[0]=Record["+ch+"].TimeSection", true, ()=>{
						console.log("recording-schedule-default-button callback")
						s.drawLocalRecordingSettings(false, ch)
					}));

					console.log('schedule', schedule)
					
					const bySchedule = (parseInt(recordMode["RecordMode["+ch+"].Mode"]) === 0);
					
					const weekDays = ['Воскресенье', 'Понедельник' , 'Вторник' , 'Среда' , 'Четверг' , 'Пятница' , 'Суббота', 'Праздники'];
					
					let html = '<div style="height:10px;"></div>';
					html += !bySchedule ? '<i>(!) здесь запись не по расписанию</i><br><br>' : '';
					
					let dayCount = toBool(schedule['Record['+ch+'].HolidayEnable']) ? 8 : 7;
					
					for (let i = 0; i < dayCount; i++) {
						
						let isDayUsed = false;
						html += '<b>' + weekDays[i] + ':</b><br>';
						
						for (let j = 0; j < 6; j++) {
							
							let arr = getSection(ch, i, j).split(' ');
						
							if ( arr[0] !== '0' ) {
								
								isDayUsed = true;
								html += ( arr[1] + ' : ' + codeTranslate( arr[0] ) + '<br>' );
							} 							
						}
						
						if (!isDayUsed) { html += 'в этот день не записывать' }
						html += '<div style="height:7px;"></div>';
					}
					
					function getSection(recordNo, i, j) {						
						return schedule['Record[' + recordNo + '].' + 'TimeSection[' + i + '][' + j + ']'];
					}
					
					function codeTranslate(code) {
						let retVal;
						switch (code) {
							case '1' : retVal = 'постоянная'; break;
							case '2' : retVal = 'по движению'; break;
							case '3' : retVal = 'постоянная + по движению'; break;
							case '4' : retVal = 'по тревоге'; break;
							case '5' : retVal = 'постоянная + по тревоге'; break;
							case '6' : retVal = 'по движению + по тревоге'; break;
							case '7' : retVal = 'постоянн. + движение + тревога'; break;
							case '393222' : retVal = 'по движению + по тревоге'; break;
						}
						return retVal;
					}
					
					if (!isEmbedCamera) s.el("schedule-title").innerHTML = 'Расписание канала <b>' + ( parseInt(ch)+1 ) + '</b>:';
					s.el("schedule-field").style.display = 'block';
					s.el("schedule-field").style.overflowY = 'scroll';
					
					s.el("schedule-field").style.color = bySchedule ? 'black' : 'grey';
					
					s.el("schedule-field").innerHTML = html;
				}

		}
		
		s.drawDahuaHDDInfo = async function() {
			
			let template = await loadTemplate("templates/hdd-status.html")
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);
			s.el("settings-refresh-button").onclick = s.drawDahuaHDDInfo;
			
			s.renderStatus('loading');
			
			
			s.getSettingsViaExecute(app.avatarSessionId, 'storageDevice.cgi?action=getDeviceAllInfo', false, false, function(localDriveInfo) {
					
				if (JSON.parse(localDriveInfo).success) {
					
					if(JSON.parse(localDriveInfo).response) {
						
						localDriveInfo = localDriveInfo.split("list.info[0].").join("list[0]."); 
						var hddObj = dahuaResponseParser(localDriveInfo, "list[0].");
								
						if (hddObj.State.toLowerCase() == 'success') {
							s.el("dahua-hdd-status").innerHTML = "<b>Данные об HDD получены</b><br>";
							
							let count = 0;
							while (hddObj["Detail["+count+"].IsError"] != undefined) {								
								let html = "Статаус раздела " + hddObj["Detail["+count+"].Path"] + " : " + ( toBool( hddObj["Detail["+count+"].IsError"] ) ? "ошибка" : "OK" ) + "<br>";								
								s.el("dahua-hdd-status").innerHTML += html;
								count++;
							}
						} 
						else {
							s.el("dahua-hdd-status").innerHTML = "Нет HDD или ошибка в ответе"
						}
					}
					else {
						s.el("dahua-hdd-status").innerHTML = "Нет HDD или ошибка в ответе"
					}
					
					s.renderStatus('ok', '', 1000)
					
				} 
				else {
					s.renderStatus('error', 'Ошибка при получении данных', 2000)
				}
				
				console.log("localDriveInfo", localDriveInfo)

			})
			
			
		}
		
		
		s.drawDahuaAudioSettings = async function()
		{

			var template = await loadTemplate("templates/dahua-audio-settings-dash.html")
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);
			s.el("settings-refresh-button").onclick = s.drawDahuaAudioSettings;
			s.renderStatus('loading');
			
			
			s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=AudioInDenoise[0]', true, 'table.AudioInDenoise[0].', (denoise) => {
							
				s.customizeInput("dahua-noise-filter", denoise.enable, [{ value : "true", text : "Вкл."}, {value : "false", text : "Выкл."}])
				
				s.getSettingsViaExecute(app.avatarSessionId, 'configManager.cgi?action=getConfig%26name=AudioInput[0]', true, "table.AudioInput[0].", (audioInput) => {
				
					s.customizeInput("dahua-audio-source", audioInput.AudioSource, [{ value : "Mic", text : "Встроенный микрофон"}, {value : "LineIn", text : "Аудиовход"}])
					
					s.renderStatus('ok', false , 1500);
				
				})
				
			})
	
			
			s.el("dahua-noise-filter").onchange = function()
			{
				s.saveDahuaSettings("configManager.cgi?action=setConfig%26AudioInDenoise[0].enable=" + s.el("dahua-noise-filter").value, true);
				
			}
			
			s.el("dahua-audio-source").onchange = function()
			{
				s.saveDahuaSettings("configManager.cgi?action=setConfig%26AudioInput[0].AudioSource=" + s.el("dahua-audio-source").value, true);
				
			}
						
			//{"method":"devAudioInput.getCaps","params":null,"id":127,"session":1023676048,"object":47565944}
			//devAudioInput.getCaps
					
		}
		
		
		
		s.drawDahuaSystemSettings = async function(isDvr)
		{
			//s.el("settings-body-embed").innerHTML = assignIDtoElements(app.templateDahuaSystemSettings, s.id);	
			var template = await loadTemplate("templates/dahua-system-settings-dash.html")	
			s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);			
			if(s.device_type == 'dvr') { s.el("camera-only-system-settings").style.display = 'none' }
			
			s.el("dahua-account-create-login-field").value = "admin001";
			
			s.el("dahua-account-create-password-field").value = generatePassword();
					
			
			customizeButton("color:#001087", "dahua-account-create-button-"+s.id, ()=> {
				
				var configStr = "userManager.cgi?action=addUser%26user.Name=" + s.el("dahua-account-create-login-field").value + "%26user.Password=";
				
				configStr += (s.el("dahua-account-create-password-field").value + "%26user.Group=admin%26user.Sharable=true%26user.Reserved=false");
				
				console.log(configStr);
				
				s.saveDahuaSettings(configStr, true)
				
			});
			
			
			customizeButton("color:#001087", "dahua-default-settings-button-"+s.id, ()=> {
				
				var configStr = "configManager.cgi?action=restoreExcept%26names[0]=Network%26names[1]=IPv6%26names[2]=VideoInSensor%26names[3]=Multicast%26names[4]=Web%26names[5]=Https%26names[6]=DVRIP%26names[7]=VideoStandard%26names[8]=VSP_GAYS%26names[9]=DeviceInfo%26names[10]=Telnet%26names[11]=WLan";
				
				var c = confirm("Сбросить устройство на заводские настройки?")
				
				if(c)
				{
					s.saveDahuaSettings(configStr, true)
				}
				
			});
			
			
			customizeButton("color:#001087", "dahua-reboot-button-"+s.id, ()=> {
				
				var c = confirm("Перезагрузить устройство?")
				
				if(c)
				{ 			
					s.saveDahuaSettings("magicBox.cgi?action=reboot", false) 
					s.closeSettings();
					
				}
							
				
			});
			
		}
		
		
		
		s.formatCard = function(attempt, pointer)
		{
			if(attempt<=7)
			{
				s.renderStatus("loading", "Попытка "+attempt, 0)
				
				console.log("Попытка: ", attempt, "pointer: ", pointer);
				
				s.saveDahuaSettings("storageDevice.cgi?action=setDevice%26pointer=" + pointer + "%26type=FormatPatition", false, (response)=>
				{	
				
					console.log("response in s.formatCard: ", response, "length: ", response.length)	
				
					if (response.length > 0)
					{
						if (response.toLowerCase().contains("ok")) 
						{						
							console.log("s.formatCard OK");
							
							s.saveDahuaSettings("magicBox.cgi?action=reboot", false)		
						
							s.renderStatus("ok", "Карта отформатирована, перезагрузка...", 2500);
	
							setTimeout(s.closeSettings, 2600);		
						}
						else
						{
							setTimeout(()=> s.formatCard(attempt+1, pointer), 5000)
						
						}
					}
				})
			}	
			
			else {
				
				console.log("s.formatCard fail, attempt: ", attempt);
				
				s.renderStatus("error", "Не удалось отформатировать карту", 3000);		
				
			}
			
		}
		
		
		s.saveDahuaSettings = function(configStr, renderStatus, callback)
		{
			var configUrl = 'xxxxxxxxxserver='+obj.id+'&camera=0&sessionId='+app.avatarSessionId+'&command=${HTTP_TOOL} "${IVIDEON_BASE_URL}/cgi-bin/' + configStr + '"';
					
			console.log("saveDahuaSettings configUrl: ", configUrl);
			
			if(!!renderStatus) s.renderStatus("loading");
			
			let http = new XMLHttpRequest();
				
			http.open('GET', configUrl, true);
		
			http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
	
			http.onreadystatechange = function() 
			{
				
				if(http.readyState == 4 && http.status == 200){
					
					if (!!renderStatus){					
						
						console.log("http.response", http.response)
						
						var responseText = JSON.parse(http.response).response.split("\r").join("").split("\n").join("").toLowerCase();
						
						
						if (responseText == "ok")
						{
							console.log("message is ok");
							s.renderStatus("ok", "OK", 2000);
						}
						
						else 
						{
							console.log("message is error:", responseText); 
							s.renderStatus("error", responseText, 4000);
							
						}		
						
					}
					
					if(!!callback) {callback(http.response)};
					
				}
							
				else if(http.readyState == 4 && !!renderStatus){
					
					console.log("else http.response", http.response, "http.readyState", http.readyState, "http.status", http.status);
					
					s.renderStatus("error", http.response, 4000);					
					
				}
				
				
			}
			
			http.send();		
		
		}
		
		
	s.getHikSettings = async function(address)
	{	
		let reqUrl = 'xxxxxxxxxserver=' + s.id + '&camera=0&sessionId=' + app.avatarSessionId + '&command=./http_tool%20--method=GET%20"${BASE_URL}' + address + '"';
				
		let response = await fetch(reqUrl, {method: "GET"});
		
		if (response.ok)
		{
			let hikSettings = await response.json(); 
			return hikSettings.response;
		}
		else {
			return null;
		}		
	}


	s.executeCall = async function(command)
	{	
		let reqUrl = 'xxxxxxxxxserver=' + s.id + '&camera=0&sessionId=' + app.avatarSessionId + '&command=' + command;

		let response = await fetch(reqUrl, {method: "GET"});		
		let responseJson = await response.json(); 
	
		return new Promise( 			
			function(resolve, reject)
			{
				resolve(responseJson)
			})
	}
	
	
	s.testIp = async function(ip)
	{
		if(!!ip)
		{	
			s.renderStatus("loading")
			
			let json = await s.executeCall("ping%20"+ip)
			
			s.renderStatus("ok", "OK", 1000)
			
			alert(json.response.length != 0 ? ("Адрес занят, ответ: " + json.response) : "Адрес " + ip + " не отвечает на ping / свободен")
		}
	}
	

	s.drawHikSystemSettings = async function()
	{
		var template = await loadTemplate("templates/hik-system-settings.html")				
		s.el("settings-body").innerHTML = assignIDtoElements(template, s.dashedId);
		
		if(s.device_type == 'dvr') { s.el("camera-only-system-settings").style.display = 'none' }
		
		s.customizeButton("color:#001087", "hik-default-settings-button", ()=> {
			
			
			
			let d = confirm("Сбросить устройство на заводские настройки? После сброса устройство перезагрузится.");
			if (d) s.saveHikSettings("ISAPI/System/factoryReset?mode=basic", "PUT", "application/xml", false, ()=>{
				s.renderStatus("loading")
				
				setTimeout(()=>{ 
				
					s.saveHikSettings("ISAPI/System/reboot", "PUT" , false, false, () =>{
						
						s.renderStatus("ok", "OK", 1000);						
						s.closeSettings();
						
					});

				},750)
				
			});			
		})
		
		//ISAPI/System/factoryReset?mode=basic
		//ISAPI/System/factoryReset%3Fmode=basic
		//"application/x-www-form-urlencoded"
		
		s.customizeButton("color:#001087", "hik-reboot-button", ()=> {
			
			let r = confirm("Перезагрузить устройство?");
			if (r) 
			{
				s.saveHikSettings("ISAPI/System/reboot", "PUT" , false, false);
				
				s.closeSettings();
			}
		})		
	}
	
		
	
	s.drawHikCardSettings = async function()
	{
		var template = await loadTemplate("templates/hik-local-recording-settings.html")				
		s.el("settings-body").innerHTML = assignIDtoElements(template, s.dashedId);
		s.el("settings-refresh-button").onclick = s.drawHikCardSettings;
		
		s.renderStatus('loading');
		
		let storageXml = await s.getHikSettings('/ISAPI/ContentMgmt/Storage');
		if (storageXml == null) {
			s.renderStatus('error', 'Ошибка получения даных', 4000);
			return false;
		}
		
		let card = JSON.parse(xml2json(parseXML(storageXml), ""))			
		let responseTime;
		
		console.log('card', card)
		
		if (card.storage.hddList.hdd) {
			
			let hdd = card.storage.hddList.hdd;
			let total = (parseInt(hdd.capacity) / Math.pow(1024,1)).toFixed(2)
			let freeGb = (parseInt(hdd.freeSpace) / Math.pow(1024,1)).toFixed(2), freeMb = hdd.freeSpace;
			
			s.el("local-drive-status-field").innerHTML = 'Статус: <b>'+hdd.status+'</b>, Свободно <b>'+freeGb+'</b> Гб (<b>'+freeMb+'</b> Мб) из <b>'+total+'</b> Гб';
		
		
			s.customizeButton("color:#001087;display:block;", "local-drive-format-button", () => {
				
				var c = confirm("Форматировать карту?");
				
				if (c) {
					
					let t1 = performance.now();
					s.renderStatus('loading');
					
					s.saveHikSettings("ISAPI/ContentMgmt/Storage/hdd/1/format/?formatType=EXT4", "PUT", null, null, function(response) {		
					let t2 = performance.now(); 
					responseTime = t2 - t1;								
						isFormattingDone(1, 0)		
					})				
				}
					
			});
		}
		else {
			s.el("local-drive-status-field").innerHTML = 'Нет карты';
		}
		
		s.renderStatus('ok', '', 1000);
			
		const xmlTempl = await fetch( chrome.extension.getURL("templates/track.xml") )
		const xml2send = await xmlTempl.text();


		s.customizeButton("color:#001087;display:inline-block;", "cont-hik-rec", () => {
			let xmlStr = xml2send.split('_REC_MODE_').join('CMR')
			console.log('track xmlStr', xmlStr)			
			s.saveHikSettings("ISAPI/ContentMgmt/record/tracks/101", "PUT", "application/xml", xmlStr, function(response) {	console.log(response) }, true)		
		})

		s.customizeButton("color:#001087;display:inline-block;", "motion-hik-rec", () => {
			let xmlStr = xml2send.split('_REC_MODE_').join('MOTION')
			console.log('track xmlStr', xmlStr)			
			s.saveHikSettings("ISAPI/ContentMgmt/record/tracks/101", "PUT", "application/xml", xmlStr, function(response) {	console.log(response) }, true)	
		})

		s.customizeButton("color:#001087;display:inline-block;", "event-hik-rec", () => {
			let xmlStr = xml2send.split('_REC_MODE_').join('AllEvent')
			console.log('track xmlStr', xmlStr)			
			s.saveHikSettings("ISAPI/ContentMgmt/record/tracks/101", "PUT", "application/xml", xmlStr, function(response) {	console.log(response) }, true)	
		})
		
		s.customizeButton("color:#001087;", "hik-schedule-toggle", async () => {
			
			s.renderStatus('loading');
			
			let trackXml = await s.getHikSettings('/ISAPI/ContentMgmt/record/tracks');
			if (trackXml == null) {
				s.renderStatus('error', 'Ошибка получения даных', 4000);
				return false;
			}
			
			let track = JSON.parse(xml2json(parseXML(trackXml), ""))
			
			let scheduleHtml = '<div style="height:7px;"></div>Перезапись: <b>' + (toBool(track.TrackList.Track[0].LoopEnable) ? 'Вкл' : 'Выкл') + '</b><div style="height:5px;"></div>';
			
			let schedule = track.TrackList.Track[0].TrackSchedule.ScheduleBlock.ScheduleAction;
			
			schedule.map( (e, i) => {
				
				scheduleHtml += '<b>Период ' + (i+1) + '</b>: с ' + weekDayTranslate(e.ScheduleActionStartTime.DayOfWeek) + " " + e.ScheduleActionStartTime.TimeOfDay; 				
				scheduleHtml += ' до ' + weekDayTranslate(e.ScheduleActionEndTime.DayOfWeek) + " " + e.ScheduleActionEndTime.TimeOfDay + "<br>";
				scheduleHtml += ( toBool(e.Actions.Record) ? recModeTranslate(e.Actions.ActionRecordingMode) : 'не записывать' ) + '<div style="height:5px;"></div>'
				
			} )
			
			s.el("hik-schedule-field").style.display = 'block';
			s.el("hik-schedule-field").style.overflowY = 'scroll';
			s.el("hik-schedule-field").innerHTML = scheduleHtml;
			s.el("hik-schedule-toggle").innerText = 'обновить расписание';
			
			s.renderStatus('ok', '', 1000);			
			
		})

	
		function weekDayTranslate (day) {
			let retVal;
			switch (day) {
				case "Monday" : retVal = 'ПН'; break;
				case "Tuesday" : retVal = 'ВТ'; break;
				case "Wednesday" : retVal = 'СР'; break;
				case "Thursday": retVal = 'ЧТ'; break;
				case "Friday" : retVal = 'ПТ'; break;
				case "Saturday": retVal = 'СБ'; break;
				case "Sunday" : retVal = 'ВС'; break;
			}
			return retVal;
		}
		
		function recModeTranslate(recMode) {
			let retVal;
			switch (recMode) {
				case "MOTION" : retVal = 'по движению'; break;
				case "CMR" : retVal = 'постоянная'; break;
				case "AllEvent" : retVal = 'по всем событиям'; break;
				default: retVal = recMode; break;				
			}
			return retVal;
		}
	
		
		async function isFormattingDone(updCount, failCount) {
			
			let xmlStr = await s.getHikSettings('/ISAPI/ContentMgmt/Storage/hdd/1/formatStatus');
			
			console.log("xmlStr in isFormattingDone", xmlStr)
			
			if (xmlStr !== null) {
				
				let formatStatus = JSON.parse(xml2json(parseXML(xmlStr), "")).formatStatus;
			
				console.log(formatStatus)
							
				if (toBool(formatStatus.formating)) {
					
					s.renderStatus('loading', 'Форматирование ' + formatStatus.percent + '%' + ' (статус обновлялся ' + updCount + ' раз)');
					
					setTimeout( () => { isFormattingDone(updCount+1, failCount) }, responseTime + 7500 )
				}
				else {
					s.renderStatus('ok', 'Форматирование завершено', 2000);
					setTimeout(s.drawHikCardSettings, 2010)
				}
			}
			else {
				
				s.renderStatus('loading', 'Форматирование...')
				if (failCount < 4) {
					setTimeout( () => { isFormattingDone(updCount+1, failCount+1) }, responseTime + 7500 )
				}
				else {
					s.renderStatus('error', 'Камера не отзывается. Проверьте статус карты через несколько минут.', 6000);
				}
				
			}

		}
		
	}
	
	
	s.drawHikAudioSettings = async function() {
		
		var template = await loadTemplate("templates/hik-audio-settings-dash.html")				
		s.el("settings-body").innerHTML = assignIDtoElements(template, s.dashedId);
		
		s.el("settings-refresh-button").onclick = s.drawHikAudioSettings;
		
		s.renderStatus('loading');
		
		let xmlStr = await s.getHikSettings('/ISAPI/System/TwoWayAudio/channels/1/capabilities');
		if (xmlStr == null) {
			s.renderStatus('error', 'Ошибка получения даных', 4000);
			return false;
		}
		
		let json = JSON.parse(xml2json(parseXML(xmlStr), "")), key = Object.keys(json)[0];		
		console.log("audio json", json)
		
		let audio = {...json[key]}
		console.log("audio", audio)
		

		if (typeof audio.audioCompressionType === 'undefined') {
			
			Array.from(document.getElementsByClassName('hik-audio-specific-'+s.id)).map( e => {
				e.disabled = true;
			})
			s.renderStatus('error', 'Похоже, на камере нет настроек звука', 4000);
			return false;
		}
		
		
		s.customizeInput('hik-audio-codec', audio.audioCompressionType['#text'], audio.audioCompressionType['@opt'].split(','))		
		s.customizeInput('hik-noise-filter', audio.noisereduce['#text'], [ {text : 'Вкл.', value : true}, {text : 'Выкл.', value : false} ] )		
		s.customizeInput('hik-audio-source', audio.audioInputType['#text'], audio.audioInputType['@opt'].split(','))		
		s.customizeInput('hik-audio-volume', parseInt(audio.speakerVolume['#text']), [ parseInt(audio.speakerVolume['@min']), parseInt(audio.speakerVolume['@max']) ] );
		
		s.renderStatus('ok', '', 1000);
		
		s.el("hik-audio-settings-save-button").onclick = function() {
			
			let toConvert = { [key] : {...audio} };	
			
			toConvert[key].audioCompressionType = s.el('hik-audio-codec').value;
			toConvert[key].noisereduce = s.el('hik-noise-filter').value;
			toConvert[key].audioInputType = s.el('hik-audio-source').value;
			toConvert[key].speakerVolume = s.el('hik-audio-volume').value;
			
			//toConvert[key].enabled = 'true';
			
			delete toConvert[key]['@version'];
			delete toConvert[key]['@xmlns'];
			
			console.log("toConvert", toConvert, "2xml", json2xml(toConvert))
			
			s.saveHikSettings("ISAPI/System/TwoWayAudio/channels/1", "PUT", "application/xml", ('<?xml version: "1.0" encoding="UTF-8"?>' + json2xml(toConvert)), function(response, success){
				
				console.log(response)
				if (!success) {setTimeout(s.drawHikAudioSettings, 2050)}
				
			}, true)
			
		}
				
	}
	
	s.drawHikImageSettings = async function() {
		
		var template = await loadTemplate("templates/hik-image-flip-settings.html")				
		s.el("settings-body").innerHTML = assignIDtoElements(template, s.dashedId);
		
		s.el("settings-refresh-button").onclick = s.drawHikImageSettings;
		
		s.renderStatus('loading');
		
		let xmlStr = await s.getHikSettings('/ISAPI/Image/channels/1/capabilities');
		if (xmlStr == null) {
			s.renderStatus('error', 'Ошибка получения даных', 4000);
			return false;
		}
				
		let json = JSON.parse(xml2json(parseXML(xmlStr), "")), key = Object.keys(json)[0];		
		let image = {...json[key]}
		/*
		if (typeof image === 'undefined') {
			s.renderStatus('error', 'Ошибка получения даных', 4000);
			return false;
		}
		*/
		let mirror = toBool(image.ImageFlip.enabled['#text']) ? image.ImageFlip.ImageFlipStyle['#text'] : 'OFF';	
	
		let mirrorOptions = [ { value : "OFF", text : "Выкл."}, {value : "LEFTRIGHT", text : "Лево-право"}, {value : "UPDOWN", text : "Верх-низ"}, {value : "CENTER", text : "Центр"} ]
		
		s.customizeInput('hik-flip', mirror, mirrorOptions) 
		s.customizeInput('hik-corridor', image.corridor.enabled['#text'], [ {text : 'Вкл.', value : true}, {text : 'Выкл.', value : false} ] )
		
		s.renderStatus('ok', '', 1000);
		
		s.el('hik-flip').onchange = () => {	

			let flipValue = s.el('hik-flip').value;
			
			if (flipValue == 'OFF') {
				
				s.saveHikSettings("ISAPI/Image/channels/1/imageFlip", "PUT", "application/xml", "<ImageFlip><enabled>false</enabled></ImageFlip>", function(response, success){				
				if (!success) {setTimeout(s.drawHikImageSettings, 2050)}			
				}, true)
			}
			else {
				let cfgStr = '<ImageFlip><enabled>true</enabled><ImageFlipStyle>' + flipValue + '</ImageFlipStyle></ImageFlip>';
				s.saveHikSettings("ISAPI/Image/channels/1/imageFlip", "PUT", "application/xml", cfgStr, function(response, success){				
				if (!success) {setTimeout(s.drawHikImageSettings, 2050)}				
				}, true)
			}
			
		}
		
		s.el('hik-corridor').onchange = () => {
			
			s.saveHikSettings("ISAPI/Image/channels/1/corridor", "PUT", "application/xml", "<corridor><enabled>" + s.el('hik-corridor').value + "</enabled></corridor>", function(response, success){				
			if (!success) {setTimeout(s.drawHikImageSettings, 2050)}			
			}, true)			
		}
		
	}
	
	
	s.drawHikDetectionSettings = async function() {
		
		var template = await loadTemplate("templates/hik-detection-settings.html")				
		s.el("settings-body").innerHTML = assignIDtoElements(template, s.dashedId);
		
		s.el("settings-refresh-button").onclick = s.drawHikAudioSettings;
		
		s.renderStatus('loading');
		
		let xmlStr = await s.getHikSettings('/ISAPI/System/Video/inputs/channels/1/motionDetection');
		if (xmlStr == null) {
			s.renderStatus('error', 'Ошибка получения даных', 4000);
			return false;
		}
		
		let md = JSON.parse(xml2json(parseXML(xmlStr), "")).MotionDetection;		
		console.log("md json", md)
				
		s.customizeInput("hik-detection-enabled", md.enabled, [ {value : "true", text : "Вкл."}, {value : "false", text : "Выкл."} ]);
		s.customizeInput("hik-detection-sensitivity", md.MotionDetectionLayout.sensitivityLevel, [1, 100, 20]);
		
		s.renderStatus('OK', '', 1000);
		
		s.el("hik-detection-save-button").onclick = function() {
			
			let configStr = '<MotionDetection><enabled>' + s.el('hik-detection-enabled').value + '</enabled><MotionDetectionLayout><sensitivityLevel>' + (parseInt(s.el('hik-detection-sensitivity').value) * 20);
			configStr += '</sensitivityLevel></MotionDetectionLayout></MotionDetection>';
			
			s.renderStatus('loading');
			console.log("configStr", configStr)
			
			s.saveHikSettings("ISAPI/System/Video/inputs/channels/1/motionDetection", "PUT", "application/xml", configStr, function(response, success){
				
				console.log(response)
				if (!success) {setTimeout(s.drawHikDetectionSettings, 2050)}
				
			}, true)
			
		}

	}


	s.drawHikNetworkSettings = async function()
	{		
		var template = await loadTemplate("templates/template-network-settings-dash.html")				
		s.el("settings-body").innerHTML = assignIDtoElements(template, s.dashedId);
		
		s.el("hik-ip-warning").style.display = "block";
		s.el("eth0-test").style.display = "inline-block";
		s.el("eth2-test").style.display = "inline-block";
		
		s.el("settings-refresh-button").addEventListener("click", s.drawHikNetworkSettings);
		
		s.renderStatus("loading");
		
		let xmlStr = await s.getHikSettings('/ISAPI/System/Network/interfaces');
		if (xmlStr == null) {
			s.renderStatus('error', 'Ошибка получения даных', 4000);
			return false;
		}
		
		
		console.log("drawHikNetworkSettings xmlStr", xmlStr)
		
		let xml = parseXML(xmlStr);
		let json = JSON.parse(xml2json(xml, "")).NetworkInterfaceList.NetworkInterface, settings = {};		
		
		let interfaces = [], interfaceList = [];
		
		if (json instanceof Array) {interfaces = json} else {interfaces[0] = json}
		
		if (s._misc.build_type.contains('dvr')) { delete interfaces[0].Discovery }
		
		console.log("interfaces", interfaces)

		
		for (let i = 0; i < interfaces.length; i++)
		{		
			let interfaceName = interfaces[i].hasOwnProperty("Wireless") ? "eth2" : "eth0";
			interfaceList.push(interfaceName);
			
			try {
				settings[interfaceName+"-ip-address"] = interfaces[i].IPAddress.ipAddress;
				settings[interfaceName+"-subnet-mask"] = interfaces[i].IPAddress.subnetMask;
				settings[interfaceName+"-dhcp"] = interfaces[i].IPAddress.addressingType == "static" ? false : true;
				settings[interfaceName+"-default-gateway"] = interfaces[i].IPAddress.DefaultGateway.ipAddress;
				
				settings[interfaceName+"-dns1"] = interfaces[i].IPAddress.PrimaryDNS.ipAddress;
				settings[interfaceName+"-dns2"] = interfaces[i].IPAddress.SecondaryDNS.ipAddress;
				
				settings[interfaceName+"-mac"] = interfaces[i].Link.MACAddress;
				settings[interfaceName+"-mtu"] = (typeof interfaces[i].Link.MTU == 'object') ? interfaces[i].Link.MTU['#text'] : interfaces[i].Link.MTU;							
			} 
			catch(err) { console.log(err.name, err.message) }
		}
		
		
		
		let fields = document.getElementsByClassName("network-specific-"+s.dashedId);
		
		
		console.log("settings", settings)
		
		
		for (let i = 0; i < fields.length; i++)
		{
			fields[i].disabled = true;
			
		}
			
		for (let i in settings)
		{
			if(!i.contains("dhcp")) 			
			{
				s.customizeInput(String(i), settings[i])
			}
			else
			{				
				s.el(i).checked = settings[i];
			}
			s.el(i).disabled = false;
		}
		
		
		s.el("eth0-mac").disabled = true; s.el("eth2-mac").disabled = true;
		
		
		for (let i = 0; i < interfaceList.length; i++)
		{	
			disableFields(interfaceList[i], settings[interfaceList[i]+"-dhcp"])
		}


		s.el("eth0-dhcp").onclick = function(){disableFields("eth0", this.checked)}						
		s.el("eth2-dhcp").onclick = function(){disableFields("eth2", this.checked)}	
				
		
		s.renderStatus("ok", false, 1000);
		
		
		s.el("network-settings-save-button").onclick = function()
		{
			let resultJsons = [{},{}]
			
			for (let i = 0; i < fields.length; i++) 
			{				
				
				if (!fields[i].disabled)
				{
					if (fields[i].id.contains("dhcp"))
					{
						if(fields[i].id.contains("eth0"))
						{
							resultJsons[0]["dhcp"] = fields[i].checked ? "dynamic" : "static"
						}
						else
						{
							resultJsons[1]["dhcp"] = fields[i].checked ? "dynamic" : "static"
						}	
						
					}
					else 
					{	
						if(!fields[i].id.contains("mtu") && !ipValidator(fields[i])) return false;
						
						if(fields[i].id.contains("eth0"))
						{
							resultJsons[0][fields[i].id.split("-"+s.id)[0].split("eth0-")[1]] = fields[i].value;	
						}
						else
						{
							resultJsons[1][fields[i].id.split("-"+s.id)[0].split("eth2-")[1]] = fields[i].value;	
						}				
					
					}
				}
			}
			
			
			console.log("resultJsons", resultJsons)
			
			
			let toConvert = []
			
			for (let i = 0; i < resultJsons.length; i++)
			{
				if (Object.keys(resultJsons[i]).length != 0)
				{	
					toConvert[i] = {};					
					toConvert[i]["NetworkInterface"] = Object.assign({},interfaces[i]);
					let ip = toConvert[i]["NetworkInterface"].IPAddress;		
					
					
					ip.ipAddress = (typeof resultJsons[i]["ip-address"] === 'undefined') ? ip.ipAddress : resultJsons[i]["ip-address"];
					
					ip.subnetMask = (typeof resultJsons[i]["subnet-mask"] === 'undefined') ? ip.subnetMask : resultJsons[i]["subnet-mask"]; 		
					
					ip.addressingType = (typeof resultJsons[i]["dhcp"] === 'undefined') ? ip.addressingType : resultJsons[i]["dhcp"];	
					
					ip.DefaultGateway.ipAddress = (typeof resultJsons[i]["default-gateway"] === 'undefined') ? ip.DefaultGateway.ipAddress : resultJsons[i]["default-gateway"];
					
					ip.PrimaryDNS.ipAddress = (typeof resultJsons[i]["dns1"] === 'undefined') ? ip.PrimaryDNS.ipAddress : resultJsons[i]["dns1"];
					
					ip.SecondaryDNS.ipAddress = (typeof resultJsons[i]["dns2"] === 'undefined') ? ip.SecondaryDNS.ipAddress : resultJsons[i]["dns2"];
					
					
					if (!!toConvert[i]["NetworkInterface"].Link) { toConvert[i]["NetworkInterface"].Link.MTU = resultJsons[i]["mtu"] }
					
				}
			}

			
			
			let str2cut = json2xml(toConvert[0]).between("<NetworkInterface", ">");
			
			console.log("str2cut :", str2cut)			
			console.log("finalJson0 :", toConvert[0])
			console.log("finalJson1 :", toConvert[1])
			
			
			s.renderStatus("loading");
			let rebootRequred = false;
			
			s.saveHikSettings("ISAPI/System/Network/interfaces/1", "PUT", "application/xml", json2xml(toConvert[0]).split(str2cut).join(''), function(response1){
				
				let resp1str = response1.between("<statusString>", "</statusString>").toLowerCase();
				if (resp1str.contains("reboot")) rebootRequred = true;
				console.log("resp1str", resp1str)
				
				if( ((resp1str == "ok") || resp1str.contains("reboot")) && typeof toConvert[1] != "undefined")
				{
					setTimeout(function(){
					
						s.saveHikSettings("ISAPI/System/Network/interfaces/2", "PUT", "application/xml", json2xml(toConvert[1]).split(str2cut).join(''), function(response2){
							
							let resp2str = response2.between("<statusString>", "</statusString>").toLowerCase();
							if(resp2str.contains("reboot")) rebootRequred = true;
							console.log("resp2str", resp2str)
							
							if (resp2str == "ok" || resp2str.contains("reboot")) 
							{	
								s.renderStatus("ok", "OK", 1500)
							}
							else
							{
								s.renderStatus("error", resp1str, 3000)
							}
							
							rebootCheck(rebootRequred);							
						})					
					}, 500)
				}
				else
				{
					if (resp1str == "ok" || resp1str.contains("reboot")) 
					{	
						s.renderStatus("ok", "OK", 1500)
					}
					else
					{
						s.renderStatus("error", resp1str, 3000)
					}
					
					rebootCheck(rebootRequred);
				}					
				
			})
			
		}
		
		function rebootCheck(reboot)
		{
			if (reboot)
			{
				var a = confirm("Требуется перезагрузка. Перезагруить устройство?");
				if (a) 
				{
					s.saveHikSettings("ISAPI/System/reboot", "PUT", false, false)
					s.closeSettings();
				}
			}
		}
		

		function disableFields(interf, disabled) {
			s.el(interf + "-ip-address").disabled = disabled;			
			s.el(interf + "-default-gateway").disabled = disabled;			
			s.el(interf + "-subnet-mask").disabled = disabled;	
			s.el(interf + "-dns1").disabled = disabled;
			s.el(interf + "-dns2").disabled = disabled;
		}
		

		function setDns(network, dnsArr)
		{
			if (!s.el(network + "-dns1").disabled) 
			{
				s.el(network + "-dns1").value = dnsArr[0];
				s.el(network + "-dns2").value = dnsArr[1];
			}
		}
		
			
		s.customizeButton("color:blue", "eth0-google-dns", () => { setDns("eth0" ,["8.8.8.8", "8.8.4.4"]) } )		
		s.customizeButton("color:blue", "eth0-cloudflare-dns", () => { setDns("eth0" ,["1.1.1.1", "1.0.0.1"]) } )
		s.customizeButton("color:blue", "eth0-yandex-dns", () => { setDns("eth0" ,["77.88.8.8", "77.88.8.1"]) } )
		
		s.customizeButton("color:blue", "eth2-google-dns", () => { setDns("eth2" ,["8.8.8.8", "8.8.4.4"]) } )			
		s.customizeButton("color:blue", "eth2-cloudflare-dns", () => { setDns("eth2" ,["1.1.1.1", "1.0.0.1"]) } )
		s.customizeButton("color:blue", "eth2-yandex-dns", () => { setDns("eth2" ,["77.88.8.8", "77.88.8.1"]) } )		
		
		
		s.customizeButton("color:blue;display:inline-block;", "eth0-test", () => {
			
			s.testIp(ipValidator(s.el("eth0-ip-address")) )

		})
		
		s.customizeButton("color:blue;display:inline-block;", "eth2-test", () => {
			
			s.testIp(ipValidator(s.el("eth2-ip-address")) )

		})
	
	}	
	
	
	s.saveHikSettings = function(address, method, contentType, xml, callback, renderStatus)
	{
		//var bodyStr = (!!xml) ? '%20--content-type="application/xml"%20--body="' + xml + '"' : '';	
		//var configUrl = 'xxxxxxxxxserver='+c.sid+'&camera=0&sessionId='+app.avatarSessionId+'&command=./http_tool%20--method=' + method + '%20"${BASE_URL}/' + address + '"' + bodyStr;		
		if (!!renderStatus) { s.renderStatus("loading") }
		
		var bodyStr = (!!xml) ? '%20--body="' + xml + '"' : '';	
		var contTypeStr = (!!contentType) ? '--content-type="' + contentType + '"%20' : '';		
		var configUrl = 'xxxxxxxxxserver='+s.id+'&camera=0&sessionId='+app.avatarSessionId+'&command=./http_tool%20--method='+method+'%20'+contTypeStr+'"${BASE_URL}/'+address+'"'+bodyStr;
		
		let http = new XMLHttpRequest();
		let result = {};
			
		http.open('GET', configUrl, true);	
		http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
		http.onreadystatechange = function() 
		{		
			if(http.readyState == 4 && http.status == 200) {
				
				console.log('saveHikSettings http.response', http.response);
				
				if(JSON.parse(http.response).success) {
					
					if (http.response.between('<statusCode>', '</statusCode>') == '1') {						
						if (renderStatus) s.renderStatus("ok", "OK", 1500);	
						result = {success : true, data : http.response}
					}
					else if(http.response.between('<statusCode>', '</statusCode>') == '7'){
						if (renderStatus) s.renderStatus("loading", "Требуется перезагрузка", 1500);	
						result = {success : true, data : http.response}
					}
					else {
						console.log("http.response.between('<statusString>', '</statusString>')", http.response.between('<statusString>', '</statusString>'));
						s.renderStatus("error", "Ошибка: " + http.response.between('<statusString>', '</statusString>'), 2000);
						result = {success : false, data : http.response}						
					}
					
				} else {
					
					let errorString = http.response.contains('<statusString>') ? http.response.between('<statusString>', '</statusString>') : JSON.parse(http.response).response;
					
					if (renderStatus) { s.renderStatus("error", "Ошибка: " + errorString, 2000) }
					result = {success : false, data : http.response}
					
				}
					
				if (!!callback) { callback(http.response, result.success) };
				
			}	
			else if (http.readyState == 4) {
				
				console.log("else http.response", http.response, "http.readyState", http.readyState, "http.status", http.status);
				result = {success : false, data : http.response}
				
				if (renderStatus) { s.renderStatus("error", String(http.response), 2000) };	
				if (!!callback) { callback(http.response, result.success) };	
				
			}
	
		}
		
		http.send();		
	}
	
	

}




async function drawIVSEditor (s) {
	
	var template = await loadTemplate("templates/template-ivs-editor.html");		
	
	if (!!s.uin) {
		s.el("settings-body").innerHTML = assignIDtoElements(template, s.id);	
	} else {
		let ivsEditDiv = document.createElement('DIV');
		ivsEditDiv.style.width = '940px';
		ivsEditDiv.innerHTML = assignIDtoElements(template, s.id);		
		document.getElementById("main-data").appendChild(ivsEditDiv);
		s.el("ivs-editor-header").style.display = "block";
			
		s.customizeButton("close_thin", "close-ivs-editor", () => {			
			app.el("side-loading").style.display = "block";			
			app.folderManager.load( () => {				
				loadServerJson(app.showDeleted, drawServerList( ()=> {				
				app.el("side-loading").style.display = "none"; }))
			
			})		
		}, false, "float:right;")		
	}
	
	
	const fields = document.getElementsByClassName("editor-loaded-"+s.id);
	
	console.log("IVS EDIT fields", fields)
	
	let originalConfigStr;
	let currentConfig = {};
	
	function enableInterface(enable) {
		if (enable) {
			Array.from(document.getElementsByClassName("editor-loaded-"+s.id)).map( e => { e.style.display = "block" })		
			drawCamList(true);
			s.el("editor-config-file-status").innerHTML = '<font color="green"><b>файл конфигурации принят</b></font>';
		} else {
			Array.from(document.getElementsByClassName("editor-loaded-"+s.id)).map( e => { e.style.display = "none" })	
		}
	}

	s.el("editor-before-file").onchange = () => {
	
		let uploadedFile = s.el("editor-before-file").files[0], file;
		const reader = new FileReader();
		 
		reader.addEventListener('load', (event) => {
			file = event.target.result;			
			s.el("editor-before").value = file;
			originalConfigStr = file;
			currentConfig = JSON.parse(file);			
			enableInterface(true);
			publishConfig(null);

		})		
		reader.readAsText(uploadedFile)
	}
	
	s.el("editor-before").oninput = () => { setTimeout(loadJsonFromField, 300) };
	s.el("editor-before").onpaste = () => { setTimeout(loadJsonFromField, 300) };
	
	function loadJsonFromField() {		
		if (s.el("editor-before").value.length > 0) {			
			try {				
				originalConfigStr = s.el("editor-before").value;
				currentConfig = JSON.parse(s.el("editor-before").value);			
				enableInterface(true);
				publishConfig(null);	
			} catch {
				s.el("editor-config-file-status").innerHTML = '<font color="red"><b>ошибка в исходном файле</b></font>';
				enableInterface(false);
			}
		}
		else {
			s.el("editor-config-file-status").innerHTML = 'вставьте в поле ниже или загрузите';
			enableInterface(false);
		}
	}
	

	
	s.customizeButton("color:#001087", "editor-cameras-to-backup", () => {
		currentConfig = JSON.parse(originalConfigStr);
		drawCamList(true);
		publishConfig(null);
		//s.el("editor-after").value = '';
	})


	s.customizeButton("color:#001087", "copy-result-to-clipboard", () => {
		let range = document.createRange();
		range.selectNode(s.el("editor-after"));
		window.getSelection().removeAllRanges(); 
		window.getSelection().addRange(range); 
		document.execCommand("copy");
		window.getSelection().removeAllRanges();
	})
	
	
		
	function editLog(logSize, extendAnalytics) {	
		let json = currentConfig; 

		if (!!json.ivslog) {
			//json.ivslog.profiles['debug'] = [...json.ivslog.profiles.default];
			json.ivslog.profiles['debug'] = JSON.parse(JSON.stringify(json.ivslog.profiles.default))
			extendLogs(json.ivslog.profiles['debug']);
			json.ivslog.profile = 'debug';			
		} 
		else if (!!json.logs) {
			json.logs.profiles['debug'] = JSON.parse(JSON.stringify(json.logs.profiles.default))
			extendLogs(json.logs.profiles['debug'].rules);
			json.logs.profile = 'debug';
		}

			function extendLogs (root) {
				
				const profileString = JSON.stringify(root);
				console.log("profileString from", typeof root, ' : ', profileString)
				
				for (let i of root) {
				
					console.log("file: ", i.out[0].file )
				
					if ( i.out[0].file.indexOf("analytics.log") === (-1) || extendAnalytics ) {
						i.out[0].file = i.out[0].file.split('~')[0] + "~" + logSize + "K";
					}
			
					if ( i.out[0].file.indexOf("service.log") != (-1) ) {
						i.in = ["*", "!rtsp", "netkern(info)" ];
						i.level = "debug";
						console.log("service.log edited")
					}
					
					if (i.out[0].file.indexOf("videoserver.log") != (-1) && profileString.indexOf("service.log") === (-1) ) {
						i.in = ["*", "!rtsp", "netkern(info)"];
						i.level = "debug";
						console.log("videoserver.log  edited")
					}
					
					if (i.out[0].file.indexOf("RTSPClientDll.log") != (-1)) {
						i.in = [ "rtsp" ];
						i.level = "trace";
						console.log("RTSPClientDll.log edited")
					}
				}
			}
	
	}
		
	function getCameraById(id) {	
		for (let i of currentConfig.cameras) {
			if (i.id == id) {
				return i;
			}
		}
	}
	
	function drawCamList (initialDraw) {
	
		if (s.cameras === undefined) { 
			s.el("editor-cam-section").style.display = "none";
			return null 
		}
		s.el("editor-cam-list").innerHTML = '<tr><td style="width:115px;"><b>ID в облаке / сервере</b></td><td style="width:270px;"><b>Название в облаке и источник</b></td><td style="width:275px"><b>Тариф</b></td><td><b>Дать этой камере ID от:</b></td></tr>';		
		
		console.log("currentConfig.cameras", currentConfig.cameras)
		const allServerCameras = [...currentConfig.cameras].sort( (a,b) => a.name > b.name);
		
		for (let i of s.cameras) {
			if ( getCameraById( parseInt(i.id.split(':')[1]) / 65536 ) == undefined ) {
				allServerCameras.push( parseInt(i.id.split(':')[1]) )
			}
		}
		
		console.log("allServerCameras", allServerCameras)
		
		for (let i of allServerCameras) {		
			if (typeof i == 'object') {
				let cloudId = ( !!s.cameras && !!s.getCameraById(parseInt(i.id)*65536) ) ? parseInt(i.id)*65536 : null;
				if (initialDraw) { getCameraById(i.id).initial_id = i.id }
				drawCamInEditor(i, cloudId)				
			} else {
				drawCamInEditor(null, i)
			}
		}
		
		function drawCamInEditor (cam, cloudId) {			
		
			//console.log("drawCamInEditor", "cam.id", cam.id, "cloudId", cloudId, "name", (!!cam ? cam.name : null), "initial_id", cam.initial_id )					
			let tr = document.createElement("TR"); 
			s.el("editor-cam-list").appendChild(tr);
			
			
			let id = document.createElement("TD");	
			id.innerHTML = ( (cloudId !== null) ? cloudId : '<i>нет</i>') + ' / ' + (!!cam ? cam.id : '<i>нет</i>');
			tr.appendChild(id);


			let name = document.createElement("TD"); 
			let nameText = ((cloudId !== null) ? s.getCameraById(cloudId).name : cam.name).slice(0,48);
			let nameHTML = (!!cam && (cloudId !== null) ) ? `<b>${nameText}</b>` : `<i>${nameText}</i>`;
			
			let idText = !!cam ? cam.id : cloudId; 
			name.innerHTML = `<img id="editor-camera-${s.id}-${idText}">${nameHTML}`;
			if (!!cam) {
				name.innerHTML += '<br><font color="grey"><small>' + cam.urlHigh.split('rtsp://').join('').slice(0,36) + '...</small></font>'
			} else {
				name.innerHTML += '<br><font color="grey"><small><i>нет в сервере</i></small></font>'
			}			
			
			name.style.maxWidth = '270px'; name.style.height = '50px';
			tr.appendChild(name);
			
			let imgId = "editor-camera-"+s.id+"-"+idText;
			if (!!cam && cloudId !== null) {
				document.getElementById(imgId).src = !!cam.initial_id ? s.getCameraById(parseInt(cam.initial_id)*65536).iconSrc : s.getCameraById(cloudId).iconSrc;
			} else {
				document.getElementById(imgId).src = app.images['camera_ghost'];
			}
			
			
			let plan = document.createElement("TD");
			let planHTML = s.getCameraById(cloudId).planInfo || null;		
			plan.innerHTML = (cloudId !== null) ? planHTML.slice(0, planHTML.indexOf('<img class="cloud-pic">')) : ' — ';					
			tr.appendChild(plan);
			
			
			if (!!cam) {			
				let controlTD = document.createElement("TD"); let select = document.createElement("SELECT");
				controlTD.appendChild(select);
				tr.appendChild(controlTD);
				
				let emptyOption = document.createElement("OPTION");
				emptyOption.text = 'не менять';
				emptyOption.value = null;
				select.appendChild(emptyOption);
				
				for (let j of allServerCameras) {
				
					if ( !(typeof j === 'object' && j.id === cam.id) ) {
						
						let option = document.createElement("OPTION");
						let optName = '';
						if (typeof j === 'object') {
							optName = !!s.getCameraById(parseInt(j.id)*65536) ? s.getCameraById(parseInt(j.id)*65536).name : j.name;
						}
						option.text = (typeof j === 'object') ? (parseInt(j.id)*65536+' / '+j.id+' - '+optName) : (j+' / нет в серв. - '+s.getCameraById(j).name)
						option.value = (typeof j === 'object') ? parseInt(j.id) : parseInt(j)/65536;
						select.appendChild(option);
					}
				}
				
				let deleteOption = document.createElement("OPTION");
				deleteOption.text = 'удалить';
				deleteOption.value = 'delete';
				select.appendChild(deleteOption);
				
				select.onchange = () => {
					if (select.value == 'delete') {
						currentConfig.cameras = currentConfig.cameras.filter(e => e.id !== cam.id)	
						console.log("currentConfig.cameras", currentConfig.cameras)
						drawCamList(false);
					}
					else if (!!select.value) {
						let container1 = parseInt(cam.id), container2 = parseInt(select.value);						
						
						if(!!getCameraById(select.value)) {		
							getCameraById(select.value).id = container1;
						}
						
						cam.id = container2;						
						
						console.log("currentConfig.cameras", currentConfig.cameras)
						drawCamList(false);
					}
				}
			}	
				
		}
		

	}
	
	s.customizeButton("color:#001087", "editor-apply-changes", () => {
		
		if (s.el("to-extend-logs").checked) {
			const extendAnalytics = s.el("extend-analytics").checked;
			const logSize = parseInt(s.el("log-size").value)*1024;
			editLog(logSize, extendAnalytics)
		}
		
		publishConfig(true)		
	})
	
	
	
	function publishConfig(publish) {
		
		if (!!publish) {
			
			for (c of currentConfig.cameras) {
				delete c["initial_id"];
			}			
			s.el("editor-after").value = JSON.stringify(currentConfig, null, 4);
			
			if (Array.from(s.el("download-result").children).length === 0) {
				var element = document.createElement('a');
				element.innerText = "скачать файл";
				element.style = "font-weight: bold; opacity: 0.6; color: #001087; display: inline-block";
				element.onmouseout = () => { element.style.opacity = 0.6 }
				element.onmouseover = () => { element.style.opacity = 0.8 }
				element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent( JSON.stringify(currentConfig, null, 4) ) );
				element.setAttribute('download', "videoserverd.config");
				s.el("download-result").appendChild(element);
			} else {
				s.el("download-result").firstChild.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent( JSON.stringify(currentConfig, null, 4) ) );
			}
			
			s.el("download-result").style.display = "inline-block";			
			s.el("copy-result-to-clipboard").style.display = "inline-block";

		} 
		else {
			s.el("download-result").style.display = "none";
			s.el("copy-result-to-clipboard").style.display = "none";
			
			s.el("editor-after").value = '';
		}
	}
	
}




var camera = function(obj)
{
	device.call(this, obj);
	
	var c = this;
	
	c.cid = c.id.split(":")[1];
	
	
	c.el = function(element)
	{
		
		if (!!document.getElementById(element + "-" + c.dashedId) )
		{
			return document.getElementById(element + "-" + c.dashedId)
		}			
		else			
		{
			return document.getElementById(element + "-" + c.sid)			
		}	
	
	}
	
	
	c.create = function()
	{
		var template = app.settings.bigCamCards ? app.templates["medium_cam"] : app.templates["small_cam"]
		
		document.getElementById("camera-" + c.dashedId).innerHTML = assignIDtoElements(template, c.dashedId)
		//document.getElementById("camera-" + c.dashedId).innerHTML = assignIDtoElements(app.templates["small_cam"], c.dashedId)
		
		c.initPanels(c.getCameraConfig)
		
		c.drawIvideonSettingsList();				
		
		c.el("camera-name").innerHTML = c.name;		
		
		if (!c.parentServerDeleted)
		{	
			c.customizeButton("color:black", "camera-name", function(){
					
				window.open(app.baseUrl + "/users/avatar_session/?user_id=" + app.userId + "&return_url=%2Fwatch%2F" + c.sid + "%2F" + c.cid)
					
			})
		}
		
		c.drawCommonCameraInfo()

		c.el("model").innerHTML = ( (!!c.vendor) ? c.vendor : "") + "&nbsp;" + ( !!c.device_model ? c.device_model : "");
		if (c.type == "web") c.el("model").innerHTML += "(веб-камера)"		

		c.el("camera-id").innerHTML = (c.parentServerType == "desktop") ? ("id:&nbsp;" + c.cid + " / " + parseInt(c.cid)/65536) : ("id:&nbsp;" + c.cid)
		
		if (c.parentServerDeleted) c.el("settings-button").remove();
		
		if (c.parentServerType == "bridge" && "desktop")
		{
			c.el("ip-address").innerHTML = "****";		
			c.el("local-password").innerHTML = "Авторизация: ****";
		}	
		
		c.el("last-online").innerHTML = unixTimeToNormal(c.last_online);
		c.el("last-offline").innerHTML = unixTimeToNormal(c.last_offline);
		c.el("first-online").innerHTML = unixTimeToNormal(c.first_online);	

		c.customizeButton("copy", "copy-button-embed", () => {
						
			let str = 'Камера: "' + c.name + '" на "' + c.parentServerName + '" (' + c.parentServerBuild + ')' + ' / ' + c.uin;
			c.copyInfo(str);
			
		}, false, "display:none", c.displayCopyButton)	
		
		
	}
	
	
	c.drawIvideonSettingsList = function()
	{				
		
		function makeTd (id, text, func)
		{
			var td = document.createElement('TD');
			td.innerHTML = '<div id="' + id + '-' + c.dashedId + '">&nbsp;' + text + '&nbsp;</div>';
			c.el("ivideon-extra-settings-list-tr").appendChild(td);
			
			c.customizeButton("color:#001087", id, func)
		}
		
		makeTd("sound-settings-button", "Аудио", c.drawSoundSettings);
		
		if(!!c.config["streams/0/resolution"]) makeTd("video-settings-button", "Видео", c.drawVideoSettings);
		
		if(c.features.includes("motion_detector") || !!c.config["motion_detector/enabled"]) 
		{
			makeTd ("detection-settings-button", "Детекция", c.loadDetectionSettings);
		}
		
		makeTd("image-settings-button", "Поворот", c.drawImageSettings);
		
		if(c.features.includes("local_user")) makeTd("security-settings-button", "Пароль", c.drawSecuritySettings);		
		
		if(!!c.config["general/timezone"]) makeTd("time-settings-button", "Время", c.drawTimeSettings);
		
	}
	
	
	c.drawCommonCameraInfo = function()
	{	
		var cam = c;	
		if (cam.online) { cam.iconSrc = app.images["camera_online"] }		
		else {cam.iconSrc = (cam.mode == "off") ? app.images["camera_off"] : app.images["camera_offline"] }
		
		cam.el("camera-status").src = cam.iconSrc;
		var camId = (cam.type == "embedded") ? cam.sid : cam.dashedId;
		
		//if cam.type = "embedded"
		
		var tariffHTML = "";
		if(cam._misc.billver != 4)
		{
			var tariff = cam._misc.tariff; 	
				
			if(!!tariff)
			{	
				if(!!app.userViewConfig)
				{
					if(!!app.userViewConfig.cameraPlans[tariff.id]) 
					{	
						tariff.name = app.userViewConfig.cameraPlans[tariff.id].l_name.ru
					}
					else
					{
						tariff.name = tariff.name.split('_').join(' ');
					}
				}
				else
				{
					tariff.name = tariff.name.split('_').join(' ');
				}	
				//tariff.name = !!app.userViewConfig ? app.userViewConfig.cameraPlans[tariff.id].l_name.ru : tariff.name.split('_').join(' ');
				
				if (!!tariff.period)
				{
					var periodWord = tariff.period.split("_")[0], planPeriodText = (tariff.period.split("_")[1] + "&nbsp;");				
					
					planPeriodText += (periodWord == "year") ? "год" : (periodWord == "month") ? "мес." : (periodWord == "week") ? "нед." : "дн.";
					
					
					
					if (tariff.trial) { planPeriodText += '&nbsp;<font color="red">пробный</font>' }										
					
					var apHTML = (cam._misc.autoprolong) ? '&nbsp;<font color=green><b>АП</b></font>&nbsp;' : '&nbsp;<font color=#a1a1a1><strike>АП</strike></font>&nbsp;'
					
					
					if (tariff.expired) 
					{ 
						tariffHTML = ('<font color="red">' + tariff.name + '<br>истек&nbsp;' + unixTimeToNormal(tariff.expires) + '</font>' + apHTML) 
						
					}
					else
					{
						tariffHTML = (tariff.name + " <font color=grey>/ " + planPeriodText  + '<br>до&nbsp;' + unixTimeToNormal(tariff.expires) + '</font>' +  apHTML);
						
						let recModeText = "";						
						if(!!cam.cloud_archive_mode.current && !!cam.services.archive) {	
							recModeText += '<span><img class="cloud-pic">&nbsp;<font color="grey"><small>';								
							var recMode = cam.cloud_archive_mode.current; 														
							recModeText += ( (recMode == "continuous") ? "постоянная" : (recMode == "detection") ? "по детекции" : (recMode == "sync_local") ? "отложенная" : "вручную");
							recModeText += '</small></font>';
							
							tariffHTML += recModeText;							
						}												
					}
					
					
					if (tariff.cancelled) 
					{ 												
						tariffHTML = ('<font color="red">' + tariff.name + '<br>отключен&nbsp;' + unixTimeToNormal(tariff.cancelled_at) + '</font>');
					}
					
					cam.el("plan").innerHTML = tariffHTML;
					
				}				
				else 
				{ 
					
					if (tariff.cancelled) 
					{ 												
						cam.el("plan").innerHTML = ('<font color="red">' + tariff.name + '<br>отключен&nbsp;' + unixTimeToNormal(tariff.cancelled_at) + '</font>');
					}
					else
					{
						cam.el("plan").innerHTML = (tariff.name);
					}
				}				
			}
			else { cam.el("plan").innerHTML = "новая камера " }
		} 			
		else
		{
			tariffHTML += (cam.services.live.active == true) ? 'оплачена<br>' : '<font color="red">не оплачена</font><br>';
							
			if (!!cam.services.archive && cam.services.archive.active) 
			{ 
				tariffHTML += ('<img class="cloud-pic">&nbsp;' +  cam.services.archive.days + ' дней');
			}
			
			cam.el("plan").innerHTML = tariffHTML;		
			
		}
		
		cam.planInfo = cam.el("plan").innerHTML;
		
		
		var accessHTML = "";			
		if (cam.grantee_count > 0)
		{
			accessHTML += ('<img class="people-pic">' + cam.grantee_count + "&nbsp;");
			
		}
		
		if (!!cam.services.public)
		{
			if (cam.services.public.active && !cam.services.public.off)
			{
				accessHTML += ('<img class="public-pic">');			
			}
		}				
		cam.el("access").innerHTML = accessHTML;
					
		
		
		
		if (!!cam.config["motion_detector/enabled"])							
		{
			cam.el("indicators").innerHTML += (cam.config["motion_detector/enabled"].value) ? '<font color="green"><b>MD</b></font>' : '<font color="grey"><strike>MD</strike></font>&nbsp;'
		}
		
		if (!!cam.config["sound_detection/enabled"])							
		{
			cam.el("indicators").innerHTML += (cam.config["sound_detection/enabled"].value) ? '&nbsp;<font color="green"><b>SD</b></font>' : '<font color="grey"><strike>SD</strike></font>'
		}
		
		
		if(!!cam.serial_number)
		{
			if (cam.type == "embedded" && !!cam.el("short-serial-number"))
			{
				if(cam.serial_number.length > 21)
				{
					cam.el("short-serial-number").innerHTML = "..." + cam.serial_number.slice(cam.serial_number.length - 21)
				}
				else
				{
					cam.el("short-serial-number").innerHTML = cam.serial_number;
				}				
			}
			
			cam.el("serial-number").innerHTML = '<font color="grey">S/N:&nbsp;</font>' + cam.serial_number;
		}
		
		
		if(app.settings.showTimezone)
		{
			let timezone = cam.timezone.contains("/") ? cam.timezone.split("/")[1].split("_").join(" ") : cam.timezone;
			
			let timehtml = (timezone.length < 11) ? ('<img class="time-pic">&nbsp;' + timezone) : ('<img class="time-pic">&nbsp;<small>' + timezone + '</small>')
			
			cam.el("timezone").innerHTML = timehtml
						
			if(!!cam.config["general/timezone"]) 
			{ 
				cam.el("time-set").innerHTML = ('<img class="small-gear-pic">&nbsp;' + cam.config["general/timezone"].value);
			}
				
		}
		
		
		if(!!cam.config["streams/0/resolution"])
		{
			cam.el("stream").innerHTML += (cam.config["streams/0/resolution"].value + "/" + cam.config["streams/0/fps"].value + "/" + cam.config["streams/0/bitrate"].value)
		}
		
	}
			
	c.getCameraConfig = function(callback)
	{
		var http = new XMLHttpRequest();
	
		var url = 'xxxxxxxxx/cameras/' + c.sid + ':' + c.cid + '?op=GET&access_token=' + app.avatarSessionId;
			
		var params = '{"projection":{"online":1,"config":1,"config_state":1}}';		
		
		http.open('POST', url, true);
		
		http.setRequestHeader('Content-type', 'application/json; charset=UTF-8');
		
		http.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');
				
		http.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
		
		http.onreadystatechange = function() {
			if(http.readyState == 4 && http.status == 200) {
				
				
				Object.assign(c, JSON.parse(http.responseText).result);
				
				console.log("CAMERA from getCameraConfig: ", c)
				
				if (typeof callback == 'function'){callback(JSON.parse(http.responseText).result)};
							
			}
		}
		
		http.send(params)	
	}
	
		
	
	c.standardApiRequest = function(configStr, value, renderStatus, callback)
	{
		var configUrl = 'xxxxxxxxx/cameras/' + c.id + '/' + configStr + '?op=SET&access_token=' + app.avatarSessionId;
					
		if (!!renderStatus) c.renderStatus("loading");
		
		let params = '{"value":' + ( (typeof value == 'string') ? '"' + value + '"' : value ) + '}';
		
		
		let http = new XMLHttpRequest();
			
		http.open('POST', configUrl, true);
		
		http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');
		
		http.onreadystatechange = function() 
		{		
			if(http.readyState == 4 && http.status == 200){
				
				if (!!renderStatus){
					
					if (JSON.parse(http.response).success)
					{
						c.renderStatus("ok", "OK", 2000);
					}
					
					else 
					{
						c.renderStatus("error", http.responseText, 3000);						
					}		
					
				}
				
				if(!!callback) {callback(http.response)};				
			}

			else if(http.readyState == 4 && !!renderStatus){
				
				console.log("else http.response", http.response, "http.readyState", http.readyState, "http.status", http.status);
				
				c.renderStatus("error", http.response, 4000);					
				
			}
		}
		
		http.send(params);			
	}
	
	
	c.drawImageSettings = async function()
	{	
		var template = await loadTemplate("templates/template-image-settings.html")		
		c.el("settings-body").innerHTML = assignIDtoElements(template, c.id);
		c.el("settings-refresh-button").onclick = c.drawImageSettings;
				
		c.customizeInput("image-flip", c.upside_down, [{value : false, text : "0"}, { value : true, text : "180"}] );
				
		c.el("image-flip").addEventListener("change", function(){
			
			c.standardApiRequest("upside_down", toBool(this.value), true)
		
		})

	}
	
	
	
	c.drawIvideonSettingsSection = async function(template, callback)
	{
		var template = await loadTemplate("templates/template-sound-settings.html")		
		c.el("settings-body").innerHTML = assignIDtoElements(template, c.id);
		
		c.renderStatus('loading');
		
		c.el("settings-refresh-button").onclick = () => c.drawIvideonSettingsSection(template, callback);
		
		c.getCameraConfig(callback)
		
		c.renderStatus('ok', false, 750);
	}
	
	
	
	c.drawSoundSettings = function()
	{		
		c.drawIvideonSettingsSection("templates/template-sound-settings.html", ()=>{
				
			if(typeof c.sound_enabled !== "undefined")
			{
				c.setClassVisibility("sound-specific", c.sound_enabled);
				
				c.customizeInput("sound-enabled", c.sound_enabled, [{value : false, text : "Выкл"}, { value : true, text : "Вкл."}] );
				
				c.el("sound-enabled").addEventListener("change", function(){
					
					c.standardApiRequest("sound_enabled", toBool(this.value), true)
					
					c.setClassVisibility("sound-specific", toBool(this.value));
				
				})
			}
			else if (!!c.config["microphone/enabled"])
			{
				c.setClassVisibility("sound-specific", c.config["microphone/enabled"].value);
				
				c.drawDynamicSelect("microphone/enabled", "sound-enabled", [ {text : "Вкл.", value : true}, {text : "Выкл.", value : false} ], (value) =>{
					
					c.setClassVisibility("sound-specific", toBool(value))
					
				});
			}
			
			console.log('!!c.config["microphone/sensitivity"]', !!c.config["microphone/sensitivity"]);
			
			
			c.drawDynamicSelect("microphone/sensitivity", "mic-sensitivity");
			
			c.drawDynamicSelect("microphone/denoise", "noise-filter", [ {text : "Вкл.", value : true}, {text : "Выкл.", value : false} ]);	
			
		})		
	
	}
	
	
	c.drawSecuritySettings = async function()
	{
		var template = await loadTemplate("templates/template-security-settings.html")		
		c.el("settings-body").innerHTML = assignIDtoElements(template, c.id);
		
		c.customizeButton("color:blue", "password123", () => {c.el("password-field").value = "Password123"} )
		c.customizeButton("color:blue", "random-password", () => {c.el("password-field").value = generatePassword()} )
		
		
		c.el("password-save-button").addEventListener("click", function(){
			
			c.renderStatus("loading");
			
			var configUrl = 'xxxxxxxxx/cameras/' + c.id + '/plugins?op=INVOKE&access_token=' + app.avatarSessionId;
				
			let params = '{"plugin":"local_user","options":{"user":"admin","password":"' + c.el("password-field").value + '"},"method":"POST"}';	
			
			let http = new XMLHttpRequest();		
			http.open('POST', configUrl, true);	
			http.setRequestHeader('Content-type', 'application/json; charset=UTF-8');	
			http.onreadystatechange = function() 
			{		
				if(http.readyState == 4 && http.status == 200)
				{															
					if (JSON.parse(http.response).success) { c.renderStatus("ok", "OK", 2000) }				
					else { c.renderStatus("error", http.responseText, 3000)	}					
				}
				else if(http.readyState == 4) { c.renderStatus("error", http.response, 4000) }								
				
			}

			http.send(params);
			
		})		
	}
	
	//
	
	
	c.drawDynamicSelect = function(param, elem, customRange, onChangeCallback)
	{
		var element = c.el(elem);		
		
		if (c.config[param] == undefined) 
		{
			console.log("param undefined!");

			element.disabled = true;
			
			return false
			
		};
		
		var paramConfig = c.config[param];
			
		console.log("drawDynamicSelect: ", elem, param);		
		
		var currentValue = paramConfig.value;
		
		var valueType = typeof paramConfig.value;
		
		console.log("typeof paramConfig.value", valueType)
		
		if (element.type == "select-one")
		{
			c[param+'_select'] = element;
						
			c[param+'_selectOptions'] = [];
						
			if (!!customRange) paramConfig.range = customRange.length > 0 ? customRange : paramConfig.range;
				
								
			for (let x = 0; x < paramConfig.range.length; x++)
			{
				c[param+'_selectOptions'][x] = document.createElement("OPTION");
				
				if (typeof paramConfig.range[x] == "object")
				{
					c[param+'_selectOptions'][x].value = paramConfig.range[x].value;					
					c[param+'_selectOptions'][x].text = paramConfig.range[x].text;
										
					
					c[param+'_select'].add(c[param+'_selectOptions'][x]);
					
					if (paramConfig.value == paramConfig.range[x].value)
					{
						c[param+'_selectOptions'][x].selected = true;
						
					}
				}
				
				else
					
				{															
					c[param+'_selectOptions'][x].text = paramConfig.range[x];

					c[param+'_select'].add(c[param+'_selectOptions'][x]);
				
					if (paramConfig.value == paramConfig.range[x])
					{
						c[param+'_selectOptions'][x].selected = true;
						
					}
					
				}
				
			}
			


			c[param+'_select'].addEventListener("change", function(){
				
				console.log("Changed to", this.value);
								
				var val = (valueType == "string") ? ('"' + this.value + '"') : (valueType == "number") ? parseInt(this.value) : this.value;
				
				c.configPatch(param, val, (result)=>{
					
					if(!result) {this.value = currentValue} 
					else 
					{
						currentValue = this.value;						
						if (typeof onChangeCallback == "function") onChangeCallback(this.value);
					}
					
				});
			
			})
		} 
		
		else if (element.type == "range")			
		{	
			var rangeMin = paramConfig.range[0]
			
			var rangeMax = paramConfig.range[1]
			
			var rangeStep = paramConfig.range[2]
						
				//5200 - range:  [0, 100, 5]
				
				element.min = rangeMin;				
				
				element.value = (!!rangeStep ? currentValue / rangeStep : currentValue)
				
				element.max = (!!rangeStep ? (rangeMax-rangeMin) / rangeStep : rangeMax); 
				
			document.getElementById(element.id+"-value").innerHTML = currentValue;	
				
			
				
			console.log ("currentValue: ", currentValue, "el.min ", element.min, "el.max ", element.max, "el.value ", element.value, "rangeStep: ", paramConfig.range[2])
							
			element.oninput = function()
			{
				document.getElementById(element.id+"-value").innerHTML = (!!rangeStep ? this.value * rangeStep : this.value)
			}
			
			element.onchange = function()
			{
				
				var newValue = (!!rangeStep ? this.value * rangeStep : this.value)
				
				c.configPatch(param, newValue, (result)=>{
					
					if(!result) {this.value = currentValue} 
					else 
					{						
						currentValue = this.value;						
						if (typeof onChangeCallback == "function") onChangeCallback(this.value);
					}
					
				});
				
				
			}
			
		}
			
	}
	
	
	c.configPatch = function(param, value, callback)
	{
		let http = new XMLHttpRequest();
		
		let configStr = 'xxxxxxxxx/cameras/' + c.sid + ':' + c.cid + '/config?op=UPDATE&access_token=' + app.avatarSessionId;
		
		let params = '{"patch":{"' + param + '":' + value + '}}';
					
		http.open('POST', configStr, true);
		
		
		http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');
		
		http.onreadystatechange = function() {
			
			if(http.readyState == 4 && http.status == 200) { 
			
				c.renderStatus('loading', '');					
						
				c.config[param].state = "syncing";
			
				c.configChangeCheck(param, value, 0, function(result){
					
					callback(result)
					
				});
				
			}	
				
			else if (http.status != 302 && http.readyState == 4) {
				
				console.log("http.readyState: ", http.readyState, "http.status: ", http.status, "http.response: ", http.response);
				
				c.renderStatus('error', http.response, 4000);

				callback(false);				
					
			}
		}
		
		http.send(params)	
		
	}
	
	
	
	c.configChangeCheck = function(param, paramValue, attempt, callback)
	{		
		setTimeout(function(){
						
			c.getCameraConfig(function(){
				
				if (typeof paramValue == "string") paramValue = paramValue.split('"').join('');
				
				console.log("old: ", paramValue)
			
				console.log("new: ", c.config[param].value, "length of new: ", c.config[param].value.length ,"state: ", c.config[param].state);
				
				if (c.config[param].state == 'synced' && String(c.config[param].value) == paramValue) 
				{
					c.renderStatus('ok', 'Сохранено!', 1500); 
					
					callback(true)
				} 
				
				else {
						if (attempt<11) c.configChangeCheck(param, paramValue, attempt+1, callback)
						
						else {c.renderStatus('error', 'Не удалось сохранить настройки', 3000); 						
						
							callback(false)}
					
					 }
				
			});
		}, 3000)
	}
	
	
	c.drawVideoSettings = async function()
	{		
		var template = await loadTemplate("templates/template-video-settings-dash.html");		
		c.el("settings-body").innerHTML = assignIDtoElements(template, c.id);
		c.el("settings-refresh-button").onclick = c.drawVideoSettings;
		
		
		//document.getElementById("settingsBodyEmbed_"+obj.id).value = obj.cameras[0].config["streams/0/resolution"]
		
		c.drawDynamicSelect("streams/0/resolution", "main-stream-resolution-field", false, function(value){
			
			if(value) 
			{
				updateStreamInfo();
				c.getCameraConfig(c.drawVideoSettings);
			}	

		});
		
		c.drawDynamicSelect("streams/0/bitrate", "main-stream-bitrate-field", false, updateStreamInfo);
		
		c.drawDynamicSelect("streams/0/fps", "main-stream-framerate-field", false, updateStreamInfo);
		
		
		c.drawDynamicSelect("streams/1/resolution", "second-stream-resolution-field", false, function(value){
			
			if(value) 
			{
				updateStreamInfo();
				c.getCameraConfig(c.drawVideoSettings);
			}	
			
			
		});		
		
		c.drawDynamicSelect("streams/1/bitrate", "second-stream-bitrate-field", false, updateStreamInfo);
		
		c.drawDynamicSelect("streams/1/fps", "second-stream-framerate-field", false, updateStreamInfo);
		
		function updateStreamInfo()
		{
			c.el("stream").innerHTML = (c.config["streams/0/resolution"].value + "/" + c.config["streams/0/fps"].value + "/" + c.config["streams/0/bitrate"].value)
		}

		
	}
	
	
	
	c.drawTimeSettings = async function()
	{	
		var template = await loadTemplate("templates/template-time-settings.html")		
		c.el("settings-body").innerHTML = assignIDtoElements(template, c.id);
		c.el("settings-refresh-button").onclick = c.drawTimeSettings;
		
		c.drawDynamicSelect("general/timezone", "device-timezone", false, function(){
			
			c.el("time-set").innerHTML = ('<img class="small-gear-pic">&nbsp;' + c.config["general/timezone"].value);
			setAttributeToClass("small-gear-pic", "src", app.images["small_gear"]);
			
		});
		
	}
	
	
	
	c.loadDetectionSettings = function()
	{
		c.getCameraConfig((config) => {
						
			if (!JSON.stringify(config).contains("motion_detector/0/zones"))
			{
				var http = new XMLHttpRequest();
				
				var url = '=' + c.sid + '&camera=' + c.cid + '&sessionId=' + app.avatarSessionId;
				
				http.open('GET', url, true);
				
				http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
				
				http.onreadystatechange = function() {
				
				if (http.readyState == 4 && http.status == 200) {
										
					var md = JSON.parse(JSON.parse(http.responseText).response);
										
					c.grid = [];
					
					if (md.enabled){
						
						var x = parseInt(md.x), y = parseInt(md.y), height = parseInt(md.height), width = parseInt(md.width);
											
						for (let i=0; i<8; i++){
							
							c.grid[i] = [];

							for (let j=0; j<12; j++){
											
								c.grid[i][j] = ((i >= y && i < (height + y)) && (j >= x && j < (width + x))) 
								
						}}
						
						c.drawBasicMD(md);
						
					}
					
				}
			}
				
			http.send()
				
			} 
			
			else {c.drawAdvancedMD()}
			
		})
	}
	
	
	c.drawBasicMD = async function(md)
	{		
		var template = await loadTemplate("templates/basic-detection-settings-lite.html")
		c.el("settings-body").innerHTML = assignIDtoElements(template, c.id);
		c.el("settings-refresh-button").onclick = c.loadDetectionSettings;
		
		if(!!c.config["motion_detector/enabled"])
		{
			if(!c.config["motion_detector/enabled"].value) {hideFields(true)}
			
				c.drawDynamicSelect("motion_detector/enabled", "motion-detection-enabled", [ {text : "Вкл.", value : true}, {text : "Выкл.", value : false} ], (value) => {
				
				hideFields(!toBool(value))
				
			});
			
		}
		else 
		{
			c.el("motion-detection-enabled").parentNode.innerHTML = md.enabled ? "Вкл." : "Выкл.";
			
		}
			
		
		function hideFields(hide)
		{
			var style = hide ? "none" : "block";
			
			c.el("motion-detection-sensitivity").style.display = style;
			c.el("motion-detection-sensitivity-label").style.display = style;
			
			c.el("motion-detection-area").style.display = style;
			c.el("motion-detection-area-label").style.display = style;
			
		}
		

		c.createGrid(false, true)
		
		c.el("motion-detection-sensitivity").innerHTML = md.sensitivity;
		
	}
	
	

	c.drawAdvancedMD = async function()
	{
		var config = c.config		
		
		var template = await loadTemplate("templates/adv-detection-settings.html")		
		c.el("settings-body").innerHTML = assignIDtoElements(template, c.id);
		c.el("settings-refresh-button").onclick = c.loadDetectionSettings;
	
		var gridWidth = config["motion_detector/0/zones"].range[0], gridHeight = config["motion_detector/0/zones"].range[1];
		
		var count = 0;
		
		c.grid = [];		
		
		for (let i=0; i<gridHeight; i++)
		{
			c.grid[i] = [];
			
			for (let j=0; j<gridWidth; j++){

			c.grid[i][j] = toBool(config["motion_detector/0/zones"].value[count])
			
			count++;		
		}}
				
				
		function setVisibility(className, visible)
		{
			var fields = document.getElementsByClassName(className)
			
			var style = visible ? "block" : "none";
			
			for (let i = 0; i < fields.length; i++)
			{
				fields[i].style.display = style;
			}			
			
		}
		
		
		
		c.drawDynamicSelect("motion_detector/enabled", "motion-detection-enabled", [ {text : "Вкл.", value : true}, {text : "Выкл.", value : false} ], (value) => {
		setVisibility("motion-detection-specific", toBool(value))	
		});
		
		
		c.customizeButton(false, "motion-detection-area-clear-button", () => {})
		c.createGrid(true, false)					
		
		c.drawDynamicSelect("motion_detector/0/sensitivity", "motion-detection-sensitivity");				
		
		
		setVisibility("motion-detection-specific", config["motion_detector/enabled"].value)
		
		
		c.el("motion-detection-area-save-button").onclick = function()
		{
			var gridStr = "";
			
			for (let i = 0; i < c.grid.length; i++)
			{
				for (let j = 0 ; j < c.grid[i].length; j++)
				{
					gridStr += (c.grid[i][j] ? "1" : "0")
					
				}
				
			}
			
			
			c.configPatch("motion_detector/0/zones", '"' + gridStr + '"', (result)=>{
					
				console.log("grid result: ", result)
					
			});
			
			console.log(gridStr);
			
		}
		
		c.drawDynamicSelect("sound_detection/enabled", "sound-detection-enable", [ {text : "Вкл.", value : true}, {text : "Выкл.", value : false} ], (value) => {
		setVisibility("sound-detection-specific", toBool(value))
		});
		
		c.drawDynamicSelect("sound_detection/sensitivity", "sound-detection-sensitivity");
		
		setVisibility("sound-detection-specific", (!!config["sound_detection/enabled"] && config["sound_detection/enabled"].value) )
		
	}
	
		
	
	c.setClassVisibility = function(className, visible)
	{
		console.log("setClassVisibility", className, visible);
		
		var fields = document.getElementsByClassName(className + "-" + c.dashedId)
		
		var style = visible ? "block" : "none";
		
		for (let i = 0; i < fields.length; i++)
		{
			fields[i].style.display = style;
		}			
		
	}
	
	

	c.createGrid = function(advancedGrid, noEdit)
	{	
		var cameraNo = 0 
		
		var element = c.el("motion-detection-area");
	
		element.style = "position:relative;";
		
		var gridHeight = c.grid.length, gridWidth = c.grid[0].length
		
		var cellsSelected = 0, erase = false;
		
		var detectionTable = document.createElement("TABLE");
		detectionTable.style = "position: absolute";
		element.appendChild(detectionTable);
				
				
		//var bgImage = document.createElement("DIV");		
		//bgImage.src = chrome.extension.getURL("noise.gif");
		
		//bgImage.style = (advancedGrid ? "width: " + (s.grid[0].length * 15) + "px; height: " + (s.grid.length * 15) + "px; background-color: #e8e8e8" : "width: 360px; height: 240px; background-color: #e8e8e8");
		//element.appendChild(bgImage);
		
		var imageHeight = (advancedGrid ? (c.grid.length * 15) : 240)
		var imageWidth = (advancedGrid ? (c.grid[0].length * 18) : 360)
		

			var xhr = new XMLHttpRequest();
			
			xhr.open('GET', 'xxxxxxxxx/cameras/' + c.id + '/live_preview?op=GET&access_token=' + app.supportSessionId, true);
			
			xhr.responseType = 'blob';
							
			var img = document.createElement('img');		
			img.src = chrome.extension.getURL('images/tv_noise_light.gif')	

			
			element.appendChild(img);	
			
			element.style = "position:relative;";
			detectionTable.style = "position: absolute";
			
			
			img.style = ("width:" + imageWidth + "px;" + "height:" + imageHeight + "px;")
			
			
			
			xhr.onload = function() {
				
				if (this.response.type == "image/jpeg") 
				{
					img.src = window.URL.createObjectURL(this.response);
					
					//if (s.cameras[cameraNo].upside_down) element.style.transform = "rotate(180deg)";
				}	
	
			};
			
			xhr.send();

		
		
		//loadPreviewImage(s.el("motion-detection-area"), s.id, camera, (s.grid[0].length * 18), (s.grid.length * 15) )	
		
		
		var elGrid = [], tr = [], td = [];		
			
		for (let i=0;i<gridHeight;i++)	
		{	
			tr[i] = document.createElement("TR");		
					
			detectionTable.appendChild(tr[i]);	
			
			elGrid[i] = [];
									
			for (let j=0; j<gridWidth; j++)	
			{								
				td[j] = document.createElement("TD");	
				td[j].style = (advancedGrid ? "height:15px; width:18px" : "height:30px;width:30px");
				tr[i].appendChild(td[j]);
								
				elGrid[i][j] = td[j];
								
				elGrid[i][j].style.opacity = 0.5;
							
				
				if (c.grid[i][j]) {elGrid[i][j].style.background = "green"}
							
				if (!noEdit)
				{	
					elGrid[i][j].addEventListener("mouseover", function(){
							
							elGrid[i][j].style.background = "#686868";										
						
							if (cellsSelected == 1)
							{																					
		
								if (i >= c.firstSelectedCell.i){c.higherI = i; c.lowerI = c.firstSelectedCell.i} 
								else {c.higherI = c.firstSelectedCell.i; c.lowerI = i}
								
								
								if (j >= c.firstSelectedCell.j){c.higherJ = j; c.lowerJ = c.firstSelectedCell.j} 
								else {c.higherJ = c.firstSelectedCell.j; c.lowerJ = j}
										
								
								for (let x = 0; x < gridHeight; x++){	
									for (let y = 0; y < gridWidth; y++){
										elGrid[x][y].style.background = (c.grid[x][y] ? "green" : "none")
								}}
								
								
								for (let x = c.lowerI; x <= c.higherI; x++){	
									for (let y = c.lowerJ; y <= c.higherJ; y++){
										elGrid[x][y].style.background = (!c.erase ? "green" : "none");
								}}
		
							}
								
					});
					
								
					c.el("motion-detection-area-clear-button").onclick = function()
					{
						for (let i = 0; i < c.grid.length; i++){
							for (let j = 0; j < c.grid[i].length; j++){
								c.grid[i][j] = false;
								elGrid[i][j].style.background = "none";
						}}
						
						//s.createGrid(element, advancedGrid);
						
					}
					
					
					elGrid[i][j].onmouseout = function(){this.style.background = (!c.grid[i][j] ? "none" : "green")}
					
					
					elGrid[i][j].onclick = function()			
					{
							
						if (cellsSelected == 0)
						{						
							if(!advancedGrid){
							
								for (let x=0; x < gridHeight; x++){								
									for (let y=0; y < gridWidth; y++){								
										c.grid[x][y] = false;										
										elGrid[x][y].style.background = "none";								
									}
								}
												
							}
						
							c.erase = (c.grid[i][j] && advancedGrid);
							
							c.firstSelectedCell = {i : i, j : j};
							
							elGrid[i][j].style.background = "green"
							
							cellsSelected = 1;
						}	
						
						else if (cellsSelected == 1)
						{
							
							c.secondSelectedCell = {i : i, j : j};

							elGrid[i][j].style.background = "green";
							
							
							if (i == c.firstSelectedCell.i && j == c.firstSelectedCell.j)
							{								
								c.grid[i][j] = (!advancedGrid ? true : !c.grid[i][j])
								
								elGrid[i][j].style.background = (c.grid[i][j] ? "green" : "none")

							}	

							else
							{
								for (let x = c.lowerI; x <= c.higherI; x++){	
												
									for (let y = c.lowerJ; y <= c.higherJ; y++){
									
									c.grid[x][y] = (!c.erase ? true : false)
		
								}}
							
							}
		
							
							cellsSelected = 0;
								
						}								
		
					}
					
				}
			}
			
		}
		
	}
	
	
	
}





function parseXML(xmlString) {
    var parser = new DOMParser();
    // Parse a simple Invalid XML source to get namespace of <parsererror>:
    var docError = parser.parseFromString('INVALID', 'text/xml');
    var parsererrorNS = docError.getElementsByTagName("parsererror")[0].namespaceURI;
    // Parse xmlString:
    // (XMLDocument object)
    var doc = parser.parseFromString(xmlString, 'text/xml');
    if (doc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {
        throw new Error('Error parsing XML');
    }
   // console.log(doc)
	return doc;
}


/*	This work is licensed under Creative Commons GNU LGPL License.

	License: http://creativecommons.org/licenses/LGPL/2.1/
   Version: 0.9
	Author:  Stefan Goessner/2006
	Web:     http://goessner.net/ 
*/

function xml2json(xml, tab) {
   var X = {
      toObj: function(xml) {
         var o = {};
         if (xml.nodeType==1) {   // element node ..
            if (xml.attributes.length)   // element with attributes  ..
               for (var i=0; i<xml.attributes.length; i++)
                  o["@"+xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue||"").toString();
            if (xml.firstChild) { // element has child nodes ..
               var textChild=0, cdataChild=0, hasElementChild=false;
               for (var n=xml.firstChild; n; n=n.nextSibling) {
                  if (n.nodeType==1) hasElementChild = true;
                  else if (n.nodeType==3 && n.nodeValue.match(/[^ \f\n\r\t\v]/)) textChild++; // non-whitespace text
                  else if (n.nodeType==4) cdataChild++; // cdata section node
               }
               if (hasElementChild) {
                  if (textChild < 2 && cdataChild < 2) { // structured element with evtl. a single text or/and cdata node ..
                     X.removeWhite(xml);
                     for (var n=xml.firstChild; n; n=n.nextSibling) {
                        if (n.nodeType == 3)  // text node
                           o["#text"] = X.escape(n.nodeValue);
                        else if (n.nodeType == 4)  // cdata node
                           o["#cdata"] = X.escape(n.nodeValue);
                        else if (o[n.nodeName]) {  // multiple occurence of element ..
                           if (o[n.nodeName] instanceof Array)
                              o[n.nodeName][o[n.nodeName].length] = X.toObj(n);
                           else
                              o[n.nodeName] = [o[n.nodeName], X.toObj(n)];
                        }
                        else  // first occurence of element..
                           o[n.nodeName] = X.toObj(n);
                     }
                  }
                  else { // mixed content
                     if (!xml.attributes.length)
                        o = X.escape(X.innerXml(xml));
                     else
                        o["#text"] = X.escape(X.innerXml(xml));
                  }
               }
               else if (textChild) { // pure text
                  if (!xml.attributes.length)
                     o = X.escape(X.innerXml(xml));
                  else
                     o["#text"] = X.escape(X.innerXml(xml));
               }
               else if (cdataChild) { // cdata
                  if (cdataChild > 1)
                     o = X.escape(X.innerXml(xml));
                  else
                     for (var n=xml.firstChild; n; n=n.nextSibling)
                        o["#cdata"] = X.escape(n.nodeValue);
               }
            }
            if (!xml.attributes.length && !xml.firstChild) o = null;
         }
         else if (xml.nodeType==9) { // document.node
            o = X.toObj(xml.documentElement);
         }
         else
            alert("unhandled node type: " + xml.nodeType);
         return o;
      },
      toJson: function(o, name, ind) {
         var json = name ? ("\""+name+"\"") : "";
         if (o instanceof Array) {
            for (var i=0,n=o.length; i<n; i++)
               o[i] = X.toJson(o[i], "", ind+"\t");
            json += (name?":[":"[") + (o.length > 1 ? ("\n"+ind+"\t"+o.join(",\n"+ind+"\t")+"\n"+ind) : o.join("")) + "]";
         }
         else if (o == null)
            json += (name&&":") + "null";
         else if (typeof(o) == "object") {
            var arr = [];
            for (var m in o)
               arr[arr.length] = X.toJson(o[m], m, ind+"\t");
            json += (name?":{":"{") + (arr.length > 1 ? ("\n"+ind+"\t"+arr.join(",\n"+ind+"\t")+"\n"+ind) : arr.join("")) + "}";
         }
         else if (typeof(o) == "string")
            json += (name&&":") + "\"" + o.toString() + "\"";
         else
            json += (name&&":") + o.toString();
         return json;
      },
      innerXml: function(node) {
         var s = ""
         if ("innerHTML" in node)
            s = node.innerHTML;
         else {
            var asXml = function(n) {
               var s = "";
               if (n.nodeType == 1) {
                  s += "<" + n.nodeName;
                  for (var i=0; i<n.attributes.length;i++)
                     s += " " + n.attributes[i].nodeName + "=\"" + (n.attributes[i].nodeValue||"").toString() + "\"";
                  if (n.firstChild) {
                     s += ">";
                     for (var c=n.firstChild; c; c=c.nextSibling)
                        s += asXml(c);
                     s += "</"+n.nodeName+">";
                  }
                  else
                     s += "/>";
               }
               else if (n.nodeType == 3)
                  s += n.nodeValue;
               else if (n.nodeType == 4)
                  s += "<![CDATA[" + n.nodeValue + "]]>";
               return s;
            };
            for (var c=node.firstChild; c; c=c.nextSibling)
               s += asXml(c);
         }
         return s;
      },
      escape: function(txt) {
         return txt.replace(/[\\]/g, "\\\\")
                   .replace(/[\"]/g, '\\"')
                   .replace(/[\n]/g, '\\n')
                   .replace(/[\r]/g, '\\r');
      },
      removeWhite: function(e) {
         e.normalize();
         for (var n = e.firstChild; n; ) {
            if (n.nodeType == 3) {  // text node
               if (!n.nodeValue.match(/[^ \f\n\r\t\v]/)) { // pure whitespace text node
                  var nxt = n.nextSibling;
                  e.removeChild(n);
                  n = nxt;
               }
               else
                  n = n.nextSibling;
            }
            else if (n.nodeType == 1) {  // element node
               X.removeWhite(n);
               n = n.nextSibling;
            }
            else                      // any other node
               n = n.nextSibling;
         }
         return e;
      }
   };
   if (xml.nodeType == 9) // document node
      xml = xml.documentElement;
   var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, "\t");
   return "{\n" + tab + (tab ? json.replace(/\t/g, tab) : json.replace(/\t|\n/g, "")) + "\n}";
}


function json2xml(o, tab) {
   var toXml = function(v, name, ind) {
      var xml = "";
      if (v instanceof Array) {
         for (var i=0, n=v.length; i<n; i++)
            xml += ind + toXml(v[i], name, ind+"\t") + "\n";
      }
      else if (typeof(v) == "object") {
         var hasChild = false;
         xml += ind + "<" + name;
         for (var m in v) {
            if (m.charAt(0) == "@")
               xml += " " + m.substr(1) + "=\"" + v[m].toString() + "\"";
            else
               hasChild = true;
         }
         xml += hasChild ? ">" : "/>";
         if (hasChild) {
            for (var m in v) {
               if (m == "#text")
                  xml += v[m];
               else if (m == "#cdata")
                  xml += "<![CDATA[" + v[m] + "]]>";
               else if (m.charAt(0) != "@")
                  xml += toXml(v[m], m, ind+"\t");
            }
            xml += (xml.charAt(xml.length-1)=="\n"?ind:"") + "</" + name + ">";
         }
      }
      else {
         xml += ind + "<" + name + ">" + v.toString() +  "</" + name + ">";
      }
      return xml;
   }, xml="";
   for (var m in o)
      xml += toXml(o[m], m, "");
   return tab ? xml.replace(/\t/g, tab) : xml.replace(/\t|\n/g, "");
}




function assignIDtoElements(str, id)
{
	return id.contains(":") ? str.split("_SERVER_ID_").join(id.split(":")[0] + "-" + id.split(":")[1]) : str.split("_SERVER_ID_").join(id)	
}


function dahuaResponseParser(responseText, beginString)
{
	
	var test_str = String(JSON.parse(responseText).response).split('\n').join('').split('\r').join('').split('caps.caps[0].').join('caps[0].').split(beginString);		
		
		//console.log('test_str in dahuaResponseParser', test_str)
		
		var resultObj = {success:true};
		
		for (let i=0; i<test_str.length; i++)
		{
			var tempArr = test_str[i].split('=');
			
			resultObj[tempArr[0]] = tempArr[1];
		
		}
		
		delete resultObj[''];
		
		console.log("resultObj: ", resultObj);
		
		return resultObj;	
}



function text(elementID, html)
{
	document.getElementById(elementID).innerHTML = html;
}



function ipValidator(field)
{
	
	console.log("field in ipValidator", field)
	
	var ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
	
	if(field.value.match(ipformat))
	{
		//field.focus();
		
		return field.value;
	}
	else
	{
		 alert("Проверьте формат IP адреса!");
		 
		 field.focus();
		 
		 return false;
	}
}


function generatePassword() 
{	
	var length = 8, charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", retVal = "";
	
	for (var i = 0, n = charset.length; i < length; ++i) 
	{
		retVal += charset.charAt(Math.floor(Math.random() * n));
	}

	return retVal;	
}



function macChecker(str)
{
	let regex = /^[a-fA-F0-9]{17}|[a-fA-F0-9]{12}$/g;
	
	return regex.test(str);
}



function macBeautifier(str)
{	
	if (str.length > 12) return str;
	
	let regex = /^[a-fA-F0-9]{17}|[a-fA-F0-9]{12}$/g;
	
	if(regex.test(str))
	{
		let result = "";
	
		for (let i = 0; i < str.length; i+= 2)
		{
			result += (str[i] + str[i+1])//.toUpperCase();	
			if (i < 10) result += ":"		
		}
		
		return result;
	}
	
	else {return str}
}



app.initiate = async function ()
{		
	
	let cfg = await app.loadConfig();	
	
	app.settings = cfg.appConfig;	
	console.log("app.settings in app.initiate", app.settings)
	
	
	app.showDeleted = false;
	
	
	app.templates = {};
	app.templates["main"] = await loadTemplate("templates/main.html");
	
	app.templates["medium_embed"] = await loadTemplate("templates/template-medium-embed.html");	
	app.templates["big_embed"] = await loadTemplate("templates/template-big-embed.html");	
	
	app.templates["medium_embed_general"] = await loadTemplate("templates/template-medium-embed-general.html");	
	app.templates["big_embed_general"] = await loadTemplate("templates/template-big-embed-general.html");	
	app.templates["medium_multi"] = await loadTemplate("templates/template-multi-dummy.html");
	app.templates["small_cam"] = await loadTemplate("templates/template-small-singlecam.html");		
	app.templates["medium_cam"] = await loadTemplate("templates/template-medium-singlecam.html");
	
	app.templates["dahua_settings_list"] = await loadTemplate("templates/dahua-settings-list.html");
	app.templates["hik_settings_list"] = await loadTemplate("templates/hik-settings-list.html");
		
	document.getElementById("id-iv-user-entry").innerHTML = app.templates["main"];
		
	
	let currentVersion = await checkVersion();
	let updMsg = (currentVersion !== null && parseInt(currentVersion.split('.').join('')) > app.thisVersionInt) ? ('&nbsp;|&nbsp;<font color="red"><b>Вышло расширение v.'+currentVersion+'</b></font>') : '';
	
	
	let breadcrumb = document.querySelector("body > div.iv-root.iv-js-dependent > div > main > div > div > div.iv-ui-partner-page > div > ul > li.active");	
	let topLinks = '&nbsp;&nbsp;<span id="back-to-original">Назад к оригинальному ЛКС</span>&nbsp;|&nbsp;<span id="open_lk">Открыть ЛК</span>&nbsp;|&nbsp;<span id="pay_history">История операций</span>&nbsp;|&nbsp;<span id="sup_link">Клиент в СУП</span>'+updMsg;	
	
	if (!breadcrumb.innerHTML.contains("back-to-original")) {
		breadcrumb.innerHTML += topLinks;			
		customizeButton("color:#001087;", "back-to-original", function(){ window.open(app.fullUrl,"_self") })	
		customizeButton("color:#001087;", "open_lk", function(){ window.open(app.baseUrl + '/users/avatar_session?user_id=' + app.userId, "_blank") })			
		customizeButton("color:#001087;", "pay_history", function(){ window.open(app.baseUrl + '/users/billing_history/' + app.userId, "_blank") })		
		customizeButton("color:#001087;", "sup_link", function(){ window.open('https://admin-partners.ivideon.com/users/' + app.userId, "_blank") })	
	}
	
	app.images = {};
	
	document.getElementById("loading-big").src = chrome.extension.getURL("images/loading_big.gif");	
	
	const imgList = ["avail_update.png", "blurred_dot.png", "camera_off.png", "camera_offline.png", "camera_online.png", "close.png", "close_thin.png",
	"cloud.png", "error.png", "expand_down.png", "expanded_down.png", "folder.png", "loading.gif", "ok.png", "people.png", "public.png",
	"server_off.png", "server_offline.png", "server_online.png", "settings_gear.png", "small_gear.png", "time.png", "unlock.png",
	"wifi.png", "update_static.png", "update_1_time.png", "update_animated.gif", "display_embed.png", "display_multi.png", "display_deleted.png", "display_ip.png", 
	"camera_online_big.png", "server_online_big.png", "all_devices.png", "expand_server.png", "deleted.png", "big_settings_gear.png", "copy.png", "ivs_editor.png", "camera_ghost.png"]
	
	
	for (let i in imgList)
	{	
		app.images[imgList[i].split('.')[0]] = chrome.extension.getURL("images/" + imgList[i]);
	}
	
	
	app.el("side-loading").src = app.images["loading"];
	app.el("server-online-big-pic").src = app.images["server_online_big"];
	app.el("camera-online-big-pic").src = app.images["camera_online_big"];
	
	let ivSidebar = document.getElementsByClassName("iv-ui-partner-sidebar")[0];
	
	var windowWidth = parseInt( getComputedStyle(document.getElementsByTagName("body")[0]).width);
	if (windowWidth < 1575) 
	{
		ivSidebar.style.display = "none";
		app.narrowWindow = true;
	}
	else	
	{
		app.narrowWindow = false;
	}
		
	
	app.folderManager = new folderMan();

    app.serverListContainer = document.getElementById("main-data"); 
	
	app.monitoring = false;
	
  		
	customizeButton("update_static", "update-img", monitor)
	
	customizeButton("update_1_time", "update-1-time", ()=>{
		
		app.el("side-loading").style.display = "block";
		
		app.folderManager.load( () => {
				
			loadServerJson(app.showDeleted, drawServerList( ()=> {
				
				app.el("side-loading").style.display = "none";
				
			}))
			
		})
		
	})
		
	customizeButton("display_embed", "display-embed", ()=> {
		
		app.el("side-loading").style.display = "block";
		app.settings.bigEmbedCards = !app.settings.bigEmbedCards;
		app.saveConfig();
		drawServerList();
		
	})

	customizeButton("display_multi", "display-multi", ()=> {
		
		app.el("side-loading").style.display = "block";
		app.settings.bigCamCards = !app.settings.bigCamCards;
		app.saveConfig();
		drawServerList();
	
	})	
	
	customizeButton("display_deleted", "display-deleted", ()=> {
		
		app.folderManager.deselect();
		app.el("side-loading").style.display = "block";
		app.showDeleted = !app.showDeleted;		
		loadServerJson(app.showDeleted, drawServerList)
		
		/*	
		app.el("deleted-display-settings").style.left = (!!app.narrowWindow) ? "940px" : "1200px";
		app.el("deleted-display-settings").style.display = (app.el("deleted-display-settings").style.display == "none") ? "block" : "none";
		*/
		
	})
	
	
	customizeButton("display_ip", "display-ip", ()=> {
		
		app.el("side-loading").style.display = "block";
		app.settings.sortByIp = !app.settings.sortByIp;
		app.saveConfig();		
		drawServerList();
		
	})
	
	
	customizeButton("ivs_editor", "ivs-editor-button", ()=> {		
		const dummyServer = new device({ id : "dummy" });
		
		dummyServer.el = id => document.getElementById(id + "-dummy");
		
		app.el("main-data").innerHTML = '';
		drawIVSEditor(dummyServer);		
	})
	
	
	
	
	

	let typeDelay;

	document.getElementById("search-field").addEventListener("keyup", function(){
	
		clearTimeout(typeDelay);
		
		typeDelay = setTimeout(function(){
			
			app.el("side-loading").style.display = "block";
			app.searchActive = (document.getElementById("search-field").value.length > 0);
			drawServerList();
		
		}, 300)
	
	})
		
	document.getElementById("search-field").addEventListener("keydown", function(){
	
		clearTimeout(typeDelay);
	
	})
	
	document.getElementById("search-field").onpaste = function()
	{
		app.el("side-loading").style.display = "block";
		app.searchActive = true;
		setTimeout(drawServerList, 200)
	}
	
	customizeButton("close_thin", "cancel-search", function()
	{		
		app.el("side-loading").style.display = "block";
		app.searchActive = false;
		document.getElementById("search-field").value = "";
		drawServerList();
	})


	
	let switches = document.getElementsByClassName("search-by-switch");	
	for (let e of switches)
	{
		e.style = "cursor: pointer; text-align:center; width: 101px; height:24px; opacity: 0.7; font-weight:bold;"		
		e.style.backgroundColor = (app.settings.searchBy[e.id.split('-')[2]]) ? "#96c2ff" : "#e3e3e3";

		e.onmouseover = function(){e.style.opacity = 0.9 };	
		e.onmouseout = function(){e.style.opacity = 0.7 };	
		
		e.addEventListener("click", function()
		{
			app.settings.searchBy[e.id.split('-')[2]] = !app.settings.searchBy[e.id.split('-')[2]];
			
			e.style.backgroundColor = (app.settings.searchBy[e.id.split('-')[2]]) ? "#96c2ff" : "#e3e3e3";
			
			app.saveConfig();
			
			if(app.searchActive) drawServerList();

		})
	}
	
	customizeButton("color:#001087;text-align:center;", "search-select-all", function(){
		
		for (let e of switches)
		{
			app.settings.searchBy[e.id.split('-')[2]] = true;
			e.style.backgroundColor = "#96c2ff";	
			if(app.searchActive) drawServerList();	
		}
		app.saveConfig();		
	});
	
	customizeButton("color:#001087;text-align:center;", "search-deselect-all", function(){
		
		for (let e of switches)
		{
			app.settings.searchBy[e.id.split('-')[2]] = false;
			e.style.backgroundColor = "#e3e3e3";
			if(app.searchActive) drawServerList();
		}
		app.saveConfig();		
	});
	
	
	//app.el("app-settings").style.left = (!ivSidebar.style.display == "none") ? "1020px" : "760px";
	app.el("app-settings").style.left = (!app.narrowWindow && ivSidebar.style.display !== "none") ? "1020px" : "760px";
	
	customizeButton("big_settings_gear", "app-settings-button", ()=> {
	
		//app.el("app-settings").style.left = (!!app.narrowWindow) ? "760px" : "1020px"; //разница 260px

		console.log("app.narrowWindow", app.narrowWindow)
		
		app.el("app-settings").style.display = (app.el("app-settings").style.display == "none") ? "block" : "none";
	
	})
	
	app.tempSettings = {};
	app.el("support-password-field").value = app.settings.supportPassword;
	app.el("show-timezone").checked = app.settings.showTimezone;
	
	app.el("show-timezone").onclick = function()
	{
		app.tempSettings.showTimezone = this.checked
	}
	
	app.el("save-app-settings").onclick = function()
	{
		app.settings.showTimezone = app.tempSettings.showTimezone;		
		app.settings.supportPassword = app.el("support-password-field").value;
		app.saveConfig();
		app.initiate();
	}
	
	app.el("cancel-app-settings").onclick = function()
	{
		app.el("show-timezone").checked = app.settings.showTimezone;		
		app.el("support-password-field").value = app.settings.supportPassword;
		app.el("app-settings").style.display = "none";		
	}

	
	//setAttributeToClass("server-online-big-pic", "src", app.images["server_online_big"]);	
	//setAttributeToClass("camera-online-big-pic", "src", app.images["camera_online_big"]);
	
	app.supportLogin(app.settings.supportPassword)
	
	
	
	var t0 = performance.now();		
		
	loadServerJson(app.showDeleted, () => { 
	
		drawServerList() 
		document.getElementById("app-splash").style.display = "none";
		document.getElementById("app-table").style.display = "block";
		
	}); 
	
}







function monitor()
{
	
	app.monitoring = !app.monitoring;
	
	var button = document.getElementById("update-img");	
		
	if (app.monitoring)
	{
	
		button.src = app.images["update_animated"]
		
		var updCount = 0;	
			
		app.monitorInterval = setInterval(function(){
			
			console.log("interval set :", app.monitorInterval)	
			
			app.folderManager.load( () => {
				
				loadServerJson(app.showDeleted, () => {
				
					drawServerList()
						
						var opacity = 0.8;
						var goingDown = true;
						
						var opacInterval = setInterval(() => {

							if(goingDown)
							{
								if (opacity >= 0.025)
								{
									opacity -= 0.025;									
									button.style.opacity = opacity;
								}
								else { goingDown = false }
							}
							else
							{
								if (opacity <= 0.8)
								{
									opacity += 0.025;
									button.style.opacity = opacity;									
								}
								else
								{
									clearInterval(opacInterval);
								}
							}							
						}, 20)												
					
					
					updCount++;						
					if (updCount > 24) 
					{	
						stopMonitoring();
					}	
					
					
				})
						
			})
			
		}, app.totalExecTime + 7500)
			
	}
	else
	{
		stopMonitoring();
	}
		
}



function stopMonitoring()
{
	clearInterval(app.monitorInterval);
			
	app.monitoring = false;
			
	document.getElementById("update-img").src = app.images["update_static"];
}



function searchFilter(serverArr)
{	
	let keyword;
	
	if (document.getElementById('search-field').value.length > 0)
	{
		keyword = document.getElementById('search-field').value;
	}
	else
	{
		app.searchActive = false;
		drawServerList();
		return false;
	} 
		
	//console.log("keyword:", keyword)	
	//console.log("serverArr:", serverArr)		
	
	let result = []; 
	
	
	function search(criteria, path, keyword, text)
	{
		//console.log("search", criteria, path, keyword)
		
		if (app.settings.searchBy[criteria])
		{
			//console.log("search +criteria", criteria, path, keyword)
			
			if(typeof path !== 'undefined') 
			{
				if ( String(path).toLowerCase().contains(keyword.toLowerCase()) ) 
				{
					//console.log("FOUND:", criteria, path, keyword);
					return text;	
				}			
			}
		}
	}
	
	
	for (let i = 0; i < serverArr.length; i++)
	{			
		//let serverIsAMatch = false;
		
		let foundBy = [], foundCameras = [], cutCameras = false;
		
		if (app.settings.searchBy.name)
		{			
			if(serverArr[i].name.toLowerCase().indexOf(keyword.toLowerCase()) != (-1))
			{
				foundBy.push("имя сервера")
				serverIsAMatch = true;
			}


			for (let j = 0; j < serverArr[i].cameras.length; j++)
			{						
				if (serverArr[i].cameras[j].name.toLowerCase().indexOf(keyword.toLowerCase()) != (-1)) 
				{										
					foundCameras.push(serverArr[i].cameras[j].id); 					
				}
			}
			
	
			if (foundCameras.length != 0)
			{
				//serverIsAMatch = true;
				foundBy.push("имя камеры")
				
				if (!foundBy.includes("имя сервера")) cutCameras = true;
			}
		}
		
		//search('uin', serverArr[i]['uin'], keyword, 'UIN')
		
		
		foundBy = foundBy.concat([ 
		
			search('mac', serverArr[i]['mac_address'], keyword.split(':').join(''), 'mac-адрес'),
			
			search('uin', serverArr[i]['uin'], keyword, 'UIN'),
			
			search('serverid', serverArr[i]['id'], keyword, 'server ID'),
			
			search('platform', serverArr[i]._misc.build_type, keyword, 'платформа')

		])
		
		if (typeof serverArr[i].cameras[0] !== 'undefined')
		{
			foundBy = foundBy.concat([ 
			
				search('sn', serverArr[i].cameras[0]['serial_number'], keyword, 'S/N'),
		
				search('model', serverArr[i].cameras[0]['device_model'], keyword, 'модель')
			
			])
		}
		
				
		
		foundBy = foundBy.filter(e => !!e)
		
		//console.log("found server:", serverArr[i].name, foundBy)
		
		if (foundBy.length != 0) 		
		{	
			//console.log("server:", serverArr[i].name, "cameras found (id's):", foundCameras)
	
			let srv = Object.assign({}, serverArr[i])
			srv.foundBy = foundBy;			
			
			if (cutCameras)
			{
				srv.cameras = [];
				
				srv.someCamerasCutOut = true;
				
				for (let c of serverArr[i].cameras)
				{	
					for (let fc of foundCameras)
					{
						if (c.id == fc) srv.cameras.push(c)
					}	
				}
			}
			
			result.push(srv)		
		}
	}
	
	console.log("result:", result)
	return result;	
}





function drawServerList(callback)
{		
	app.serverListContainer.innerHTML = "";
	
	let serverArr = (!!app.folderManager.selectedId) ? app.folderManager.getFolderDevices(app.folderManager.selectedId) : app.serverArr;
	app.currentServerArr = serverArr;
		
	if (app.searchActive) 
	{				
		serverArr = searchFilter(serverArr);
		
		if(serverArr.length == 0)
		{
			app.serverListContainer.innerHTML = '<div style="width: 850px; height: 200px; padding-top: 160px; text-align: center;"><font color="grey" size="+1">По заданным критериям ничего не найдено</font></div>';
		}

	}
	else
	{
		if(serverArr.length == 0)
		{
			if(app.showDeleted)
			{
				app.serverListContainer.innerHTML = '<div style="width: 850px; height: 200px; padding-top: 160px; text-align: center;"><font color="grey" size="+1">Удаленных устройств нет</font></div>';
			}
			else
			{
				app.serverListContainer.innerHTML = '<div style="width: 850px; height: 200px; padding-top: 160px; text-align: center;"><font color="grey" size="+1">Активных устройств нет</font></div>';
			}
		}
	}
	
	
	
	if (app.settings.sortByIp)
	{
		let iparr = [];
		let filteredServerArr = [];
		
		for (let i = 0; i < serverArr.length; i++)
		{
			if (!iparr.includes(serverArr[i].ip) ) { iparr.push(serverArr[i].ip) }
		}
		
		
		let ipHeaderArr = [];
		let colorArr = ["#7B68EE", "#FF8C00", "#9ACD32", "#DC143C","#C0C0C0", "#FF00FF", "#FFFF00"] 
		let colorCount = 0;		
		
		
		for (let i = 0; i < iparr.length; i++)
		{
			let thisIpArr = [];
			
			for (let j = 0; j < serverArr.length; j++)
			{
				if (serverArr[j].ip == iparr[i]) 
				{ 
					serverArr[j].displayColor = colorArr[colorCount]
					thisIpArr.push(serverArr[j]);					
				}
			}
			
			thisIpArr = sortServers(thisIpArr);
			
			ipHeaderArr[i] = document.createElement("TABLE");
			
			ipHeaderArr[i].innerHTML += '<tr><td style = "width:40px;background-color:' + colorArr[colorCount] + '"></td><td>&nbsp;<b>Сеть&nbsp;' + ( !!iparr[i] ? iparr[i] : 'не определена') + '</b></td></tr>';
			//ipHeaderArr[i].innerHTML += '<tr><td style = "height:20px;width:7px;"><td style = "width:40px;background-color:' + colorArr[colorCount] + '"></td><td>&nbsp;<b>Сеть&nbsp;' + iparr[i] + '</b></td></tr>'
			
			app.serverListContainer.appendChild(ipHeaderArr[i])

			
			
			for (let j = 0; j < thisIpArr.length; j++)
			{
				thisIpArr[j] = new server(thisIpArr[j]);
				
				thisIpArr[j].create()
			}

			colorCount = (colorCount < 6) ? colorCount+1 : 0;
		}		
		
	}	
	else
	{
		serverArr = sortServers(serverArr);
		
		for (let i = 0; i < serverArr.length; i++)
		{			
			serverArr[i] = new server(serverArr[i]);
			
			serverArr[i].displayColor = "#FFFFFF";
			
			serverArr[i].create();
		}
		
	}
	
	
	
	function sortServers(arr)
	{
		let arrOnline = arr.filter((i) => i.online).sort(function(a,b){return a.name === b.name ? 0 : a.name > b.name ? 1 : -1});	
		
		let arrOffline = arr.filter((i) => !i.online).sort(function(a,b){return a.name === b.name ? 0 : a.name > b.name ? 1 : -1});	
		
		return arrOnline.concat(arrOffline);
	}
	
	/*
	function drawFoundBy(srv)
	{
		let messageFound = document.createElement("TABLE");
		
		messageFound.style = 'height:15px;width:480px;background-color:yellow';
		
		messageFound.innerHTML = 'FOUND BY: ';
						
		srv["foundBy"].forEach(function(item){messageFound.innerHTML +=(' ' + item + ' ')})

		app.serverListContainer.appendChild(messageFound);
	}
	*/
	
	
	app.el("device-stats").style.display = "block";
	
	let totalServers = 0, serversOnline = 0, totalCameras = 0, camerasOnline = 0;
	for (let srv of serverArr)
	{
		totalServers++;
		if (srv.online) {serversOnline++}
		
		for (let cam of srv.cameras)
		{
			totalCameras++
			if (cam.online) {camerasOnline++}
		}
	}
	
	

		
	document.getElementById("server-count").innerHTML = '<b>' + serversOnline + '/' + totalServers;
	document.getElementById("camera-count").innerHTML = '<b>' + camerasOnline + '/' + totalCameras;
		
	//console.log("totalServers", totalServers, "serversOnline", serversOnline, "totalCameras", totalCameras, "camerasOnline", camerasOnline)
	
	setPics();
	
	app.el("side-loading").style.display = "none";
	
	if (typeof callback == 'function') callback();	
	
}



function setPics() {
	setAttributeToClass("time-pic", "src", app.images["time"]);
	
	setAttributeToClass("small-gear-pic", "src", app.images["small_gear"]);
	
	setAttributeToClass("cloud-pic", "src", app.images["cloud"]);
	
	setAttributeToClass("public-pic", "src", app.images["public"]);
	
	setAttributeToClass("people-pic", "src", app.images["people"]);
	
	setAttributeToClass("wifi-pic", "src", app.images["wifi"]);
	
	setAttributeToClass("avail-update-pic", "src", app.images["avail_update"]);	
}


function setAttributeToClass(elementClass, attribute, value) {	
	var elementArr = document.getElementsByClassName(elementClass);
	
	for (let item of elementArr)
	{		
		item.setAttribute(attribute, value);
	}
}


function getServerById(id)
{
	for (let i = 0; i < app.serverArr.length; i++)
	{
		if (app.serverArr[i].id == id) {return app.serverArr[i]}
		
	}	
}


function extractData(sources) {						
	let result = {authData : "", ip : ""};
	for (let i in sources)
	{
		if (!!sources[i]) 
		{
			result.authData = (sources[i].contains("@")) ? sources[i].between("rtsp://", "@") : sources[i].between("rtsp://", "/");
			
			result.ip = (sources[i].contains("@")) ? sources[i].between("@", "/") : sources[i].between("rtsp://", "/");					
							
			break;
		}									
	}
	return result;
}


function folderMan() {
	let f = this;
	
	f.selectedId = false
	
	let selectedFolder = false, folderJson, previousFolderState = "", folderArr = [];


	getFolderCameras = function(id)
	{ 		
		for (let i = 0; i < folderArr.length; i++)
		{
			if (id == folderArr[i].id)
			{
	
				return folderArr[i].cameras;
			}
		}
	}
	
	
	getSubfolderCameras = function (id, arr){ 	
			
		for (let i = 0; i < folderArr.length; i++)
		{
			if (id == folderArr[i].id)
			{	
				
				for (let j = 0; j < folderArr[i].subfolders.length; j++)
				{				
					arr.push(getFolderCameras(folderArr[i].subfolders[j]))						
					
					getSubfolderCameras(folderArr[i].subfolders[j], arr)
				}
			}
		}	
		
		return arr.flat(Infinity);	
	}
	
	
	
	f.load = async function (callback)
	{
		let response = await fetch("xxxxxxxxx/folders?op=FIND&access_token=" + app.avatarSessionId, 
		{method: "POST",
		body: '{"user":"' + app.userId + '"}'
		})	
		
		if (response.ok)
		{	
			let folderJson = await response.json();
			let folderStr = JSON.stringify(folderJson)
			
			if(folderStr != previousFolderState)
			{
				folderArr = folderJson.result.items;
				
				previousFolderState = folderStr;
				
				drawFolders(callback)
			}
			else
			{
				console.log("same folders")
				callback();
			}
		}	
		else 
		{			
			console.log("error")
		}

	}
	
	
	
	drawFolder = function(id, space)
	{			
		let spaceString = '';
		let html = '<div style="white-space: nowrap;">'
		
		for (let i = 0; i < (space-1); i++) { spaceString+='<img class="blurred-dot-pic">' }
		
			
		for (let i = 0; i < folderArr.length; i++)
		{
			if (id == folderArr[i].id)
			{
				let totalCameras = folderArr[i].cameras.length + getSubfolderCameras(folderArr[i].id,[]).length;
								
				let groupCaption = folderArr[i].name + '&nbsp;(' + totalCameras + ')';
				
				html += (spaceString + '<img class="folder-pic"><div class="folder-button" style="display: inline-block; height:22px; cursor: pointer;" id="' + id + '">' + groupCaption + '</div></div>');
				
				document.getElementById('folderData').innerHTML += html;
								
				if (folderArr[i].subfolders.length != 0)
				{	
					let filtered = [];
					
					for (let j = 0; j < folderArr[i].subfolders.length; j++)
					{						
						for (let f = 0; f < folderArr.length; f++)
						{							
							if (folderArr[i].subfolders[j] == folderArr[f].id) {filtered.push(folderArr[f])}
						}
					}
					
					filtered.sort(function(a,b){return a.name === b.name ? 0 : a.name > b.name ? 1 : -1});		
					
					
					for (let x = 0; x < filtered.length; x++)
					{
						drawFolder(filtered[x].id, space+1)										
					}
					
				}
				
			}	
	
		}
	
	}
	
	
	f.getFolderDevices = function (folderId)
	{
		var folder = f.getFolderById(folderId)
		
		folder.allFolderCameras = folder.cameras.concat(getSubfolderCameras(folder.id, []) )
		
		var folderServerArray = [];						
		var serversToSkip = [];
		
		for (let j = 0; j < folder.allFolderCameras.length; j++)
		{									
			let serverId = folder.allFolderCameras[j].split(':')[0];
			
			if (getServerById(serverId).cameras.length > 1)
			{
				if(!serversToSkip.includes(serverId))
				{
					let filteredServer = Object.assign({}, getServerById(serverId))					
					
					let camNumBefore = filteredServer.cameras.length; 
					
					filteredServer.cameras = filteredServer.cameras.filter( (item) => folder.allFolderCameras.includes(item.id) )	
					
					let camNumAfter = filteredServer.cameras.length
					
					if (camNumBefore > camNumAfter) filteredServer.someCamerasCutOut = true;
								
					folderServerArray.push(filteredServer)					
					
					serversToSkip.push(serverId);	
				}					
			}
			
			else
				
			{
				folderServerArray.push(getServerById(serverId))			
			}
			
		}
		
		return folderServerArray;
	
	}
	
	
	f.getFolderById = function(id)
	{
		for (let i of folderArr)
		{
			if (i.id == id) return i;
		}
	}
	
	
	f.deselect = function()
	{
		setAttributeToClass("folder-button", "style", "font-weight:normal; display: inline-block; height:22px; cursor: pointer;");
		
		app.searchActive = false;
		
		f.selectedId = false;
		
		drawServerList();
		
		document.getElementById('all-devices-button').style.fontWeight = "bold";
	}
	
	
	drawFolders = function(callback)
	{		
		document.getElementById('folderData').innerHTML = "";		
	
		document.getElementById("folderData").style.display = (folderArr.length <= 1) ? "none" : "block";
		document.getElementById("folderData").style.width = (folderArr.length <= 1) ? "0px" : "310px";
				
		//console.log("folderArr", folderArr)		
				
		if (folderArr.length == 0){
			if (typeof callback == 'function') callback();
			return false
		}		

		document.getElementById('folderData').innerHTML += '<img class="all-devices-pic"><div class="folder-button" style="display: inline-block; font-weight:bold; height:22px; cursor: pointer;" id="all-devices-button">Все устройства</div><br><br>';
	
		
		if (folderArr[0].root) folderArr[0].name = "Все сгруппированные";	
		
		var subfolderArr = [], selectedFolderExists = false;
		
		
		for (let i = 0; i < folderArr.length; i++)
		{	
			if(folderArr[i].id == f.selectedId) selectedFolderExists = true;
	
			if (folderArr[i].subfolders.length != 0)
			{
				for (let j = 0; j < folderArr[i].subfolders.length; j++)
				{
					subfolderArr.push(folderArr[i].subfolders[j])
				}
				
			}
		}
	
		if (!selectedFolderExists) f.selectedId = false;
		
		
		
		for (let i = 0; i < folderArr.length; i++)
		{	
			let isSubfolder = false;
			
			for (let j = 0; j < subfolderArr.length; j++)
			{
				if (folderArr[i].id == subfolderArr[j]) {isSubfolder = true};			
			}				
				if(!isSubfolder) 
				{																	
					drawFolder(folderArr[i].id, 0);															
				}
		}
		
		

		document.getElementById('all-devices-button').addEventListener("click", f.deselect)
		
		
		
		for (let i = 0; i < folderArr.length; i++)
		{
			document.getElementById(folderArr[i].id).onclick = function(){
				
				if (app.showDeleted) return false;
			
				setAttributeToClass("folder-button", "style", "font-weight:normal; display: inline-block; height:22px; cursor: pointer;");
				
				this.style.fontWeight = "bold";
				
				app.searchActive = false;
				
				f.selectedId = folderArr[i].id;
				
				app.serverListContainer.innerHTML = '';	

				drawServerList();
			
			}
		}	
		
		
		
		setAttributeToClass("folder-pic", "src", app.images["folder"]);	
		setAttributeToClass("all-devices-pic", "src", app.images["all_devices"]);		
		setAttributeToClass("blurred-dot-pic", "src", app.images["blurred_dot"]);
		
		
		if (typeof callback == 'function') callback();
		
	}
	
}

